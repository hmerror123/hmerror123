[
  {
    "Id": "841101",
    "ThreadId": "357191",
    "Html": "\r\n<p>Hi</p>\r\n<p>Where can I find a simple tutorial on how to start running this tool and doing simple things like finding select boxes and doing button clicks?</p>\r\n",
    "PostedDate": "2012-05-25T15:36:58.167-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "841612",
    "ThreadId": "357191",
    "Html": "<p>How about checking Documentation?</p>",
    "PostedDate": "2012-05-28T05:42:21.9-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "841640",
    "ThreadId": "357191",
    "Html": "<p>Hello,</p>\r\n<p>as I noticed, to my surprise, there's no in the world a free book where people could find information how to install PowerShell and how to import a module. There are a number of books about PowerShell v.1.0 or about specifics like Remoting, nonetheless, to learn how to install PS 2.0 you need pay money. ;) Despite the millions of copies of Windows 7 sold.</p>\r\n<p>Writing about 'how to install PowerShell 2.0' is an&nbsp;actually boring subject to me (it's Microsoft's duty as I think to publish such things). Windows XP/2003 have some requirements, Vista has other, on a Windows 7 box you need only check a feature, somewhere you need add support for ISE...</p>\r\n<p>In the cloud, where the documentation exists, I added short&nbsp;chapter about&nbsp;how to install the module (paths, the command, typical&nbsp;caspol settings for loading the module via network), the Get-Window chapter is done, and I hope to finish today or tomorrow the Get-[Control] chapter. This will be a starter's reference.</p>\r\n<p>To describe the topic is really arduous, because it relates heavily on Microsoft's object model that is often hidden from testers' eyes under an automated test tool.</p>\r\n<p>&nbsp;</p>\r\n<p>Briefly, start your try with this:</p>\r\n<p>1. run PowerShell (please find out in the Internet how to run PowerShell on your system), this time run it by selecting Run As Administrator</p>\r\n<p>run the following comamnd&nbsp;</p>\r\n<p>Set-ExecutionPolicy -ByPass or Set-ExecutionPolicy -RemoteSigned or Set-ExecutionPolicy -Unrestricted command</p>\r\n<p>(for most applications you'll need only run PowerShell as is, however sometimes, for example for testing services.msc, you need to run it as Run As Administrator or under domain admin credentials)</p>\r\n<p>2. load the module (UIAutomation.dll is the main part, TMX.dll is a module for organizing results, UIAutoamtionAliases.dll contains additional aliases if needed)</p>\r\n<p>issue the following command:</p>\r\n<p>ipmo .....full...path....to....dll...\\UIAutomation.dll</p>\r\n<p>ipmo .....full...path....to....dll...\\TMX.dll</p>\r\n<p>3. to check that all is OK run the following</p>\r\n<p>gmo UIA*</p>\r\n<p>the output should contains some funcitons like these:</p>\r\n<p>ModuleType Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ExportedCommands<br />---------- ----&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ----------------<br />Binary&nbsp;&nbsp;&nbsp;&nbsp; UIAutomation&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {Start-UIACacheRequest, Stop-UIACacheRequest, Get-UIAActiveWindow, Ge...</p>\r\n<p>4. If you need to automate this process, consider learning the topic \"PowerShell profiles\" and simply add to a profile you preferred to the ipmo lines.</p>\r\n<p>&nbsp;</p>\r\n<p>I'll just now put this post to the Documentation page (at the project). I hope that no longer than tomorrow I'll publish the first documentation in a single doc (install, Get-UIAWindow, Get-UIA[Control]).</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2012-05-28T07:01:08.667-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "841744",
    "ThreadId": "357191",
    "Html": "\r\n<blockquote style=\"border:solid .1em #ccc; font-style:italic; margin:.25em 1em 0 1em; padding:0 .25em 0 .25em\">\r\n<strong>xinliu wrote:</strong><br>\r\n<p>Hello,</p>\r\n<p>as I noticed, to my surprise, there's no in the world a free book where people could find information how to install PowerShell and how to import a module. There are a number of books about PowerShell v.1.0 or about specifics like Remoting, nonetheless,\r\n to learn how to install PS 2.0 you need pay money. ;) Despite the millions of copies of Windows 7 sold.</p>\r\n<p>Writing about 'how to install PowerShell 2.0' is an&nbsp;actually boring subject to me (it's Microsoft's duty as I think to publish such things). Windows XP/2003 have some requirements, Vista has other, on a Windows 7 box you need only check a feature, somewhere\r\n you need add support for ISE...</p>\r\n<p>In the cloud, where the documentation exists, I added short&nbsp;chapter about&nbsp;how to install the module (paths, the command, typical&nbsp;caspol settings for loading the module via network), the Get-Window chapter is done, and I hope to finish today\r\n or tomorrow the Get-[Control] chapter. This will be a starter's reference.</p>\r\n<p>To describe the topic is really arduous, because it relates heavily on Microsoft's object model that is often hidden from testers' eyes under an automated test tool.</p>\r\n<p>&nbsp;</p>\r\n<p>Briefly, start your try with this:</p>\r\n<p>1. run PowerShell (please find out in the Internet how to run PowerShell on your system), this time run it by selecting Run As Administrator</p>\r\n<p>run the following comamnd&nbsp;</p>\r\n<p>Set-ExecutionPolicy -ByPass or Set-ExecutionPolicy -RemoteSigned or Set-ExecutionPolicy -Unrestricted command</p>\r\n<p>(for most applications you'll need only run PowerShell as is, however sometimes, for example for testing services.msc, you need to run it as Run As Administrator or under domain admin credentials)</p>\r\n<p>2. load the module (UIAutomation.dll is the main part, TMX.dll is a module for organizing results, UIAutoamtionAliases.dll contains additional aliases if needed)</p>\r\n<p>issue the following command:</p>\r\n<p>ipmo .....full...path....to....dll...\\UIAutomation.dll</p>\r\n<p>ipmo .....full...path....to....dll...\\TMX.dll</p>\r\n<p>3. to check that all is OK run the following</p>\r\n<p>gmo UIA*</p>\r\n<p>the output should contains some funcitons like these:</p>\r\n<p>ModuleType Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ExportedCommands<br>\r\n---------- ----&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ----------------<br>\r\nBinary&nbsp;&nbsp;&nbsp;&nbsp; UIAutomation&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {Start-UIACacheRequest, Stop-UIACacheRequest, Get-UIAActiveWindow, Ge...</p>\r\n<p>4. If you need to automate this process, consider learning the topic &quot;PowerShell profiles&quot; and simply add to a profile you preferred to the ipmo lines.</p>\r\n<p>&nbsp;</p>\r\n<p>I'll just now put this post to the Documentation page (at the project). I hope that no longer than tomorrow I'll publish the first documentation in a single doc (install, Get-UIAWindow, Get-UIA[Control]).</p>\r\n<p>&nbsp;</p>\r\n</blockquote>\r\n<p>Cool Thanks.</p>\r\n<p>Small typo though Set-ExecutionPolicy -Unrestricted should be Set-ExecutionPolicy Unrestricted (removed the dash) otherwise it won't work.</p>\r\n<p>&nbsp;</p>\r\n<p>Can't wait to see the document on how to actually use your library.</p>\r\n",
    "PostedDate": "2012-05-28T10:57:39.65-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "841754",
    "ThreadId": "357191",
    "Html": "<p>Is there a way to deselect a button?</p>\r\n<p>I did this</p>\r\n<p>&nbsp;</p>\r\n<p>Get-UIAWindow -pn calc | Get-UIAButton -AutomationId '131' -Name '1'| Invoke-UIAButtonClick</p>\r\n<p>But on my windows 7 machine I still see the dotted outline of the button.</p>\r\n<p>&nbsp;</p>\r\n<p><a href=\"http://imageshack.us/photo/my-images/600/screenshot010uye.jpg/\">http://imageshack.us/photo/my-images/600/screenshot010uye.jpg/</a></p>\r\n<p><a href=\"http://imageshack.us/photo/my-images/205/screenshot009lc.jpg/\">http://imageshack.us/photo/my-images/205/screenshot009lc.jpg/</a></p>\r\n<p>&nbsp;</p>\r\n<p>The first image is how it what happens when I run the command. It selects the \"1\" button. The second images shows what happens when I close or minimize the calculator.</p>",
    "PostedDate": "2012-05-28T11:14:27.617-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "841756",
    "ThreadId": "357191",
    "Html": "<p>Oops, dashes are typos, definitely.</p>\r\n<p>If you loaded the library and the gmo (get-module) UIA*&nbsp;command returned some functions, you can delve into testing right now.</p>\r\n<p>Now, you need to determine whether your application can be tested with the module (and with the MS UI Automation library).</p>\r\n<p>run the following at your PowerShell prompt (assuming that your application is running):</p>\r\n<p>Get-UIAWindow -Name 'your app window title'</p>\r\n<p>this command should return some output similar to what the following command returns:</p>\r\n<p>Start-Process calc -PassThru | Get-UIAWindow # this code starts a process and passes the process object via pipeline to the Get-UIAWindow cmdlet</p>\r\n<p># as there is no more code, the Get-UIAWindow cmdlet simply returns the window of the process to the command prompt</p>\r\n<p>If this step works for you, try the following:</p>\r\n<p>Start-Process calc -PassThru | Get-UIAWindow | Get-UIAButton -Name 1 | Invoke-UIAButtonClick</p>\r\n<p># this code start a process, passes it (the object of the process) to the Get-UIAWindow cmdlet</p>\r\n<p># the Get-UIAWindow cmdlet get the window of the process and passes it further via the pipeline</p>\r\n<p># the Get-UIAButton cmdlet receives the window and performs the search for a button with name '1'</p>\r\n<p># finally, if the button is found, the Get-UIAButton retruns it to the Invoke-UIAButtonClick cmdlet.</p>\r\n<p>If your application is supported, things are simple as it can be nowhere else, PowerShell is very intuitive environment with good code-completing funcitonality.</p>\r\n<p>&nbsp;</p>\r\n<p>Here you should ask, how to determine which commands (cmdlets, spell it command-lets) you need to use.</p>\r\n<p>run the following after the module is loaded</p>\r\n<p>Get-Command -Module UIA* *Button* # to find all the command that work with button</p>\r\n<p>Get-Command -Module UIA* *TextBox* # there's no need to explain the command? ;)</p>\r\n<p>Get-Command -Module UIA* *Click* # clicks on controls that support clicks</p>\r\n<p>Get-Command -Module UIA* # to list all the cmdlets the module provides</p>\r\n<p>Of course, this is a free project with traditional lack of documentation, some commands are not ready yet and so on. Nevertheless, I'd suggest you start right now, because PowerShell in general and the module particularly is a matter of hand-working. It can be learnt by hands.</p>\r\n<p>I'll publish documentation today (tomorrow, sooner), however you need to understand that documentation is not a piece of cake, and not just a post here. It should contain many pitfalls that MS UI Automation has (for example, some controls don't do what you'd expect. So that there should be a lot of recommendations how to fix or avoid this, and Microsoft doesn't provide rich troubleshooting guide :( ). I mean that the full documentation is a matter of weeks (if no months) and should include a lot, including people's feedback for various kinds of applications).</p>\r\n<p>I'd suggest also, as the next step, to visit the blog <a href=\"http://SoftwareTestingUsingPowerShell.com\">http://SoftwareTestingUsingPowerShell.com</a>&nbsp;that has a cookbook style&nbsp;to find out how to deal with several types of controls. All the posts are based on standard Windows applications.</p>",
    "PostedDate": "2012-05-28T11:23:29.35-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "841757",
    "ThreadId": "357191",
    "Html": "\r\n<p>Oo, you has started. That's good.</p>\r\n<p>The red square is just help for you. You can switch it off. It never even touches your app. ;)</p>\r\n<p>At the PowerShell prompt run the following:</p>\r\n<p>[UIAutomation.Preferences]::</p>\r\n<p>and press tab. Every press the tab shows the next system variable. Variables called 'Highlight' help you control this square. You can switch it off by running the command:</p>\r\n<p>[UIAutomation.Preferences]::Highlight = $false</p>\r\n<p>Technically, the square are four forms :) Try to use <a title=\"UIAVerify\" href=\"http://uiautomationverify.codeplex.com/\">\r\nUIAVerify</a> (a project here, at codeplex, by Microsoft's guys), it shows controls as a tree, and has similar square.</p>\r\n",
    "PostedDate": "2012-05-28T11:28:18.04-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "841758",
    "ThreadId": "357191",
    "Html": "\r\n<p>I understand. I am sure as this very useful library gets more popular more people will start writing tutorials on it and there will be more documentation on it.</p>\r\n<p>&nbsp;</p>\r\n<p>I will check out those commands. I am also using your UIAutomationSpy to figure out controls though I don't know what -AutomationId is or if that is a random number.</p>\r\n<p>I tried to run [UIAutomation.Preferences]::Highlight = $false through powershell but I still see the highlighted control.</p>\r\n<p>&nbsp;</p>\r\n<p>When I just do this</p>\r\n<p>[UIAutomation.Preferences]::Highlight I get &quot;false&quot; back.</p>\r\n",
    "PostedDate": "2012-05-28T11:31:32.687-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "841769",
    "ThreadId": "357191",
    "Html": "<p>There is no functionality to lit off the 'selection'. The command Highlight = $false switches off only further use of the square. The square is gone if you close the session.</p>\r\n<p>You can switch off the square at the start of your PowerShell session, for example, in a PowerShell profile (there are six types of them :))</p>\r\n<p>Also, there are primitive profiles (sets of settings). By default, the user works in the Presentation profile. It displays the square and has a half-second's delay between cmdlets.</p>\r\n<p>For unattended execution, there is the Normal profile. It doesn't show the square and has no delays. I'd recommend you to use the Presentation profile at the time you are learning the module and the time you are projecting tests. And using with zero delays may be dangerous for test execution: sometimes things like context menu are slow and your tests may simply fail if menu has a delay before test finds it.</p>\r\n<p>It looks slightly awkwardly, but works:</p>\r\n<p>[UIAutomation.Mode]::Profile = [UIAutomation.Modes]::Presentation # recommended until you are familiar enough</p>\r\n<p>[UIAutomation.Mode]::Profile = [UIAutomation.Modes]::Normal # for unattended execution</p>\r\n<p>[UIAutomation.Mode]::Profile = [UIAutomation.Modes]::Debug # with biggest delays</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2012-05-28T12:05:22.867-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "841772",
    "ThreadId": "357191",
    "Html": "<p>There are several tools to investigate into controls and the MS UI Automation object model:</p>\r\n<p><strong>UISpy</strong> - a tool within Windows SDK</p>\r\n<p><strong>Inspect</strong> - also a good tool, can be found in Windows SDK</p>\r\n<p><strong><a title=\"UIAVerify\" href=\"http://uiautomationverify.codeplex.com/\">UIAVerify</a></strong> - it's my favorite tool. It can foolow the focus or get what it's hovering over. Sometimes, it fails.</p>\r\n<p><strong>Spy++</strong> - shipped with Visual Studio (not Express), less usable. You can use it</p>\r\n<p><strong>AccEvents</strong>&nbsp;- Windows SDK. I don't use it, some people use.</p>\r\n<p><strong>UIAutomationSpy</strong> - it's my tool. It shows what is under the mouse cursor in the language that PowerShell understands</p>\r\n<p>It can also store the code line&nbsp;in the clipboard. The next version will have richer capabilities and, probably, I'll add the recorder to it.</p>\r\n<p>Now, there IS a recorder. It's not brilliant, but it can help somehow.</p>\r\n<p>run at the PowerShell prompt the following command:</p>\r\n<p>Start-UIARecorder -noc -nos -nou -wri -Seconds 20</p>\r\n<p>and use the mouse to hover over application of your interest. After twenty seconds, it should open two text files:&nbsp;the recording file with full paths to the control and its shorter version (sometimes, the longer version can be invaluable).</p>",
    "PostedDate": "2012-05-28T12:14:21.333-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "842212",
    "ThreadId": "357191",
    "Html": "<p>Do I have to import the .dlls each time? I noticed everytime I open up a new powershell console I always have to import the modules in again.</p>\r\n<p>I still have to try with the squares removing and see if that works.</p>",
    "PostedDate": "2012-05-29T11:52:16.207-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "842218",
    "ThreadId": "357191",
    "Html": "<p>Yes, it's the logic: PowerShell loads automatically only the engine.</p>\r\n<p>If you need to&nbsp;load modules or make some settings, PowerShell supports files (these are like autoexec.bat for PowerShell or auto_open macro for Excel) called profiles. They are simple scripts, however, there is the difference: PowerShell load them every session.</p>\r\n<p>Here is a good article: <a href=\"http://vmin.wordpress.com/2012/05/28/understanding-the-six-powershell-profiles-technet-blogs/\">http://vmin.wordpress.com/2012/05/28/understanding-the-six-powershell-profiles-technet-blogs/</a></p>\r\n<p>&nbsp;</p>\r\n<p>In practice, PowerShell support command-line execution&nbsp;from PowerShell scripts as well as from *.bat/*.cmd files. Tests often require to be run independently and, under these requirements, runs look like</p>\r\n<p>powershell.exe -file .... or powershell.exe -command ...</p>\r\n<p>where settings can be stored in separate or mutual files...</p>\r\n<p>&nbsp;</p>\r\n<p>Maybe, there'll be time when the module settings will be also stored in the config XML file. I'm planning to write an utility that will provide a GUI to settings and store them in config files. This is an idea, no more, since it's not very usable to have several config files per module dll.</p>\r\n<p>&nbsp;</p>\r\n<p>The first version of the documentation is posted as a link on the Documentation page.</p>",
    "PostedDate": "2012-05-29T12:08:53.03-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "842257",
    "ThreadId": "357191",
    "Html": "<blockquote style=\"border: solid .1em #ccc; font-style: italic; margin: .25em 1em 0 1em; padding: 0 .25em 0 .25em;\"><strong>xinliu wrote:</strong><br />\r\n<p>Yes, it's the logic: PowerShell loads automatically only the engine.</p>\r\n<p>If you need to&nbsp;load modules or make some settings, PowerShell supports files (these are like autoexec.bat for PowerShell or auto_open macro for Excel) called profiles. They are simple scripts, however, there is the difference: PowerShell load them every  session.</p>\r\n<p>Here is a good article: <a href=\"http://vmin.wordpress.com/2012/05/28/understanding-the-six-powershell-profiles-technet-blogs/\"> http://vmin.wordpress.com/2012/05/28/understanding-the-six-powershell-profiles-technet-blogs/</a></p>\r\n<p>&nbsp;</p>\r\n<p>In practice, PowerShell support command-line execution&nbsp;from PowerShell scripts as well as from *.bat/*.cmd files. Tests often require to be run independently and, under these requirements, runs look like</p>\r\n<p>powershell.exe -file .... or powershell.exe -command ...</p>\r\n<p>where settings can be stored in separate or mutual files...</p>\r\n<p>&nbsp;</p>\r\n<p>Maybe, there'll be time when the module settings will be also stored in the config XML file. I'm planning to write an utility that will provide a GUI to settings and store them in config files. This is an idea, no more, since it's not very usable to have  several config files per module dll.</p>\r\n<p>&nbsp;</p>\r\n<p>The first version of the documentation is posted as a link on the Documentation page.</p>\r\n</blockquote>\r\n<p>So in my powershell script I write I will always have to have this in it</p>\r\n<p>ipmo .....full...path....to....dll...\\UIAutomation.dll</p>\r\n<p>ipmo .....full...path....to....dll...\\TMX.dll</p>",
    "PostedDate": "2012-05-29T13:18:56.097-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "842269",
    "ThreadId": "357191",
    "Html": "<blockquote style=\"padding-bottom: 0px; font-style: italic; padding-top: 0px; padding-left: 0.25em; margin: 0.25em 1em 0px; padding-right: 0.25em; border: #ccc 0.1em solid;\"><strong>chobo2 wrote:</strong><br />\r\n<p>So in my powershell script I write I will always have to have this in it</p>\r\n<p>ipmo .....full...path....to....dll...\\UIAutomation.dll</p>\r\n<p>ipmo .....full...path....to....dll...\\TMX.dll</p>\r\n</blockquote>\r\n<p>There are three ways:</p>\r\n<p>1) use line(s) in a script(s)</p>\r\n<p>2) write a module. It's common practice to put the functionality you use more than several times to a module and load module if necessary. Loading the libraries can also be added to there, the module.</p>\r\n<p>3) use a PowerShell profile. However, if your tests run on several hosts, all the hosts should have such profile.</p>\r\n<p>This is absolutely normal to load modules or .NET libraries directly if your code needs it. Similarly to any scripting language, Python, for example - don't you need to load modules there?</p>\r\n<p>&nbsp;</p>\r\n<p>The last year we tried to use FitNesse with our product. FitNesse is not a good solution for products that are one long scenario for the whole life of the installation, and our use was such:</p>\r\n<p>we divided the functionality accordingly to user stories, and each story started as</p>\r\n<p>start /wait /minimized powershell.exe -noprofile -command {c:\\testscript.cmd param1 param2; exit;}</p>\r\n<p>just a bit more complicated than the above sample. The file, testscript.cmd in our sample, runs a script *.ps1, which in turn loads the module. The module, a set of high-level functions like Invoke-RootNodeClick or Invoke-Aciton,&nbsp;loads libraries (other modules).</p>\r\n<p>Here I would provide a piece of advice: if you need the speed, your tests should run quickly, load the libraries one time and avoid stopping errors.</p>\r\n<p>If time is not the goal, load libraries/modules so many times as you need for your tests.</p>",
    "PostedDate": "2012-05-29T13:35:55.31-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "857058",
    "ThreadId": "357191",
    "Html": "<blockquote style=\"padding-bottom: 0px; font-style: italic; padding-top: 0px; padding-left: 0.25em; margin: 0.25em 1em 0px; padding-right: 0.25em; border: #ccc 0.1em solid;\"><strong>xinliu wrote:</strong><br />\r\n<p>Hello,</p>\r\n<p>as I noticed, to my surprise, there's no in the world a free book where people could find information how to install PowerShell and how to import a module. There are a number of books about PowerShell v.1.0 or about specifics like Remoting, nonetheless, to learn how to install PS 2.0 you need pay money. ;) Despite the millions of copies of Windows 7 sold.</p>\r\n<p>Writing about 'how to install PowerShell 2.0' is an&nbsp;actually boring subject to me (it's Microsoft's duty as I think to publish such things). Windows XP/2003 have some requirements, Vista has other, on a Windows 7 box you need only check a feature, somewhere you need add support for ISE...</p>\r\n<p>In the cloud, where the documentation exists, I added short&nbsp;chapter about&nbsp;how to install the module (paths, the command, typical&nbsp;caspol settings for loading the module via network), the Get-Window chapter is done, and I hope to finish today or tomorrow the Get-[Control] chapter. This will be a starter's reference.</p>\r\n<p>To describe the topic is really arduous, because it relates heavily on Microsoft's object model that is often hidden from testers' eyes under an automated test tool.</p>\r\n<p>&nbsp;</p>\r\n<p>Briefly, start your try with this:</p>\r\n<p>1. run PowerShell (please find out in the Internet how to run PowerShell on your system), this time run it by selecting Run As Administrator</p>\r\n<p>run the following comamnd&nbsp;</p>\r\n<p>Set-ExecutionPolicy -ByPass or Set-ExecutionPolicy -RemoteSigned or Set-ExecutionPolicy -Unrestricted command</p>\r\n<p>(for most applications you'll need only run PowerShell as is, however sometimes, for example for testing services.msc, you need to run it as Run As Administrator or under domain admin credentials)</p>\r\n<p>2. load the module (UIAutomation.dll is the main part, TMX.dll is a module for organizing results, UIAutoamtionAliases.dll contains additional aliases if needed)</p>\r\n<p>issue the following command:</p>\r\n<p>ipmo .....full...path....to....dll...\\UIAutomation.dll</p>\r\n<p>ipmo .....full...path....to....dll...\\TMX.dll</p>\r\n<p>3. to check that all is OK run the following</p>\r\n<p>gmo UIA*</p>\r\n<p>the output should contains some funcitons like these:</p>\r\n<p>ModuleType Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ExportedCommands<br />---------- ----&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ----------------<br />Binary&nbsp;&nbsp;&nbsp;&nbsp; UIAutomation&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {Start-UIACacheRequest, Stop-UIACacheRequest, Get-UIAActiveWindow, Ge...</p>\r\n<p>4. If you need to automate this process, consider learning the topic \"PowerShell profiles\" and simply add to a profile you preferred to the ipmo lines.</p>\r\n<p>&nbsp;</p>\r\n<p>I'll just now put this post to the Documentation page (at the project). I hope that no longer than tomorrow I'll publish the first documentation in a single doc (install, Get-UIAWindow, Get-UIA[Control]).</p>\r\n<p>&nbsp;</p>\r\n</blockquote>\r\n<p>I'm trying to get 0.7.12 to work on Win8 RC (8400) and am getting the below error when I try to import the modules.&nbsp; <br /><br />PS C:\\Windows\\system32&gt; ipmo 'C:\\Program Files\\_1\\UIAutomation.dll'<br />ipmo : Could not load file or assembly 'file:///C:\\Program Files\\_1\\UIAutomation.dll' or one of its dependencies.<br />Operation is not supported. (Exception from HRESULT: 0x80131515)<br />At line:1 char:1<br />+ ipmo 'C:\\Program Files\\_1\\UIAutomation.dll'<br />+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br />&nbsp;&nbsp;&nbsp; + CategoryInfo&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : NotSpecified: (:) [Import-Module], FileLoadException<br />&nbsp;&nbsp;&nbsp; + FullyQualifiedErrorId : System.IO.FileLoadException,Microsoft.PowerShell.Commands.ImportModuleCommand<br /><br />Can anyone tell me what I'm doing wrong?</p>",
    "PostedDate": "2012-07-03T14:41:59.747-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "857070",
    "ThreadId": "357191",
    "Html": "\r\n<p>Hi&nbsp;<a href=\"http://www.codeplex.com/site/users/view/hrp27\">hrp27</a>,</p>\r\n<p>which package of three (.NET35, .NET40, for.Metro.testing) do you use?</p>\r\n<p>As you use the %ProgramFiles% folder, I should suppose you have downloaded the 'for.Metro.testing' package?</p>\r\n<p>If so, it seems that you have not installed the certificate.</p>\r\n<p>I tested right now all three packages (from my hard drive, from where they were packaged and posted) on a Windows 8 English x86 box with the certificate installed. All three ipmo'ed well.</p>\r\n<p>&nbsp;</p>\r\n<p>As a simple test, please try to import the .NET40 version.</p>\r\n<p>Otherwise, if you have not installed the certificate, follow this post's pictures:&nbsp;<a href=\"http://softwaretestingusingpowershell.com/2012/06/01/metro-automation-getting-started/\">http://softwaretestingusingpowershell.com/2012/06/01/metro-automation-getting-started/</a></p>\r\n",
    "PostedDate": "2012-07-03T15:16:18.183-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "857081",
    "ThreadId": "357191",
    "Html": "<blockquote style=\"padding-bottom: 0px; font-style: italic; padding-top: 0px; padding-left: 0.25em; margin: 0.25em 1em 0px; padding-right: 0.25em; border: #ccc 0.1em solid;\"><strong>xinliu wrote:</strong><br />\r\n<p>Hi&nbsp;<a href=\"http://www.codeplex.com/site/users/view/hrp27\">hrp27</a>,</p>\r\n<p>which package of three (.NET35, .NET40, for.Metro.testing) do you use?</p>\r\n<p>As you use the %ProgramFiles% folder, I should suppose you have downloaded the 'for.Metro.testing' package?</p>\r\n<p>If so, it seems that you have not installed the certificate.</p>\r\n<p>I tested right now all three packages (from my hard drive, from where they were packaged and posted) on a Windows 8 English x86 box with the certificate installed. All three ipmo'ed well.</p>\r\n<p>&nbsp;</p>\r\n<p>As a simple test, please try to import the .NET40 version.</p>\r\n<p>Otherwise, if you have not installed the certificate, follow this post's pictures:&nbsp;<a href=\"http://softwaretestingusingpowershell.com/2012/06/01/metro-automation-getting-started/\">http://softwaretestingusingpowershell.com/2012/06/01/metro-automation-getting-started/</a></p>\r\n</blockquote>\r\n<p>Thanks for the quick reply.&nbsp; I get the same error when I try the .NET40 version.&nbsp;</p>\r\n<p>PS C:\\Windows\\system32&gt; ipmo 'C:\\Program Files\\_2\\UIAutomation.dll'<br />ipmo : Could not load file or assembly 'file:///C:\\Program Files\\_2\\UIAutomation.dll' or one of its dependencies.<br />Operation is not supported. (Exception from HRESULT: 0x80131515)<br />At line:1 char:1<br />+ ipmo 'C:\\Program Files\\_2\\UIAutomation.dll'<br />+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br />&nbsp;&nbsp;&nbsp; + CategoryInfo&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : NotSpecified: (:) [Import-Module], FileLoadException<br />&nbsp;&nbsp;&nbsp; + FullyQualifiedErrorId : System.IO.FileLoadException,Microsoft.PowerShell.Commands.ImportModuleCommand</p>\r\n<p>I did install the certificate and I see it in the trusted root authority.&nbsp; Also, I saw someone mention PoshConsole and tried that.&nbsp; It seems to work in PoshConsole but not in the standard PowerShell ISE.&nbsp; I can ipmo in Posh and no error.&nbsp; I can even Show-UIAMetroStartScreen and that works.&nbsp; I would like to use PowerShell ISE.&nbsp; Any suggestions?</p>",
    "PostedDate": "2012-07-03T15:43:10.17-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "857088",
    "ThreadId": "357191",
    "Html": "<p>May it be the case that your powershell.exe simply does not work? I have on one Windows 8 host something like that. After, possibly, installing some software that requires a .NET Framework (I don't know what is the cause), PowerShell on the host got broken. However, PowerShell ISE works.</p>\r\n<p>&nbsp;</p>\r\n<p>If you are going to test anything except Metro UI, any powershell host would match your goals (I advised a month ago to use PoshConsole. Since that I wrote a very simple host aka UIAutomationSpy. PoshConsole is not so stable to be used for substantial amount of time, I think).</p>\r\n<p>If you want to test a Metro UI app, you will run tests from UIAutomationSpy or, soon, UIARunner. Other hosts can't hover over the Metro UI. (If you have two monitors, I have never tried this on Windows 8, there is a chance that ANY powershell host could see Metro UI controls. But, I'm not sure in that).</p>\r\n<p>If you need to get familiar with the module, you can use any Windows with .NET 3.5 or higher.</p>",
    "PostedDate": "2012-07-03T15:57:18.357-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "857091",
    "ThreadId": "357191",
    "Html": "<p>hrp27, is you folder %ProgramFiles% local? This error may be the result of loading a library (dll) from a network location.</p>\r\n<p>For example, your user profile is on network, and folder virtualization maps Program Files to your profile, therefore to a network place.</p>\r\n<p>On the other hand, if PoshConsole consumes, it's not a network location.</p>\r\n<p>&nbsp;</p>\r\n<p>What the Get-ExecutionPolicy cmdlet says? Try to set Set-ExecutionPolicy RemoteSigned or even&nbsp;Set-ExecutionPolicy ByPass (running powershell As Administrator) and load thereafter.</p>",
    "PostedDate": "2012-07-03T16:15:13.877-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "857095",
    "ThreadId": "357191",
    "Html": "<blockquote style=\"padding-bottom: 0px; font-style: italic; padding-top: 0px; padding-left: 0.25em; margin: 0.25em 1em 0px; padding-right: 0.25em; border: #ccc 0.1em solid;\"><strong>xinliu wrote:</strong><br />\r\n<p>hrp27, is you folder %ProgramFiles% local? This error may be the result of loading a library (dll) from a network location.</p>\r\n<p>For example, your user profile is on network, and folder virtualization maps Program Files to your profile, therefore to a network place.</p>\r\n<p>On the other hand, if PoshConsole consumes, it's not a network location.</p>\r\n<p>&nbsp;</p>\r\n<p>What the Get-ExecutionPolicy cmdlet says? Try to set Set-ExecutionPolicy RemoteSigned or even&nbsp;Set-ExecutionPolicy ByPass (running powershell As Administrator) and load thereafter.</p>\r\n</blockquote>\r\n<p><br />I tried both ByPass and RemoteSigned and still no ipmo.&nbsp; I'm getting the same behavior on 2 other systems.&nbsp;</p>",
    "PostedDate": "2012-07-03T16:20:42.39-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "857100",
    "ThreadId": "357191",
    "Html": "\r\n<p>Okay, try to load TMX.dll or 3rd party, for example, pscx.dll from&nbsp;<a href=\"http://pscx.codeplex.com/releases/view/45101\">http://pscx.codeplex.com/releases/view/45101</a>&nbsp;</p>\r\n<p>We need to understand whether <span>it is &nbsp;the problem with only UIAutomation.dll, or any dll can't be loaded.</span></p>\r\n",
    "PostedDate": "2012-07-03T16:43:57.31-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "857537",
    "ThreadId": "357191",
    "Html": "<p>The root of the problem was in attemps to use binary files that was downloaded from the Internet. Windows 8 prevents you from using such easy ways.</p>\r\n<p>First of all, you need to download files to your user's folder and unpack there.</p>\r\n<p>After that you need to unblock libraries (executables are ready for use immediately after you clicked the UAC confirmation).</p>\r\n<p>Only after finishing the steps described above, you can put the files to the 'Program Files' folder.</p>\r\n<p>The whole story is posted here:&nbsp;<a href=\"http://softwaretestingusingpowershell.com/2012/07/04/metro-automation-the-first-step/\">http://softwaretestingusingpowershell.com/2012/07/04/metro-automation-the-first-step/</a></p>",
    "PostedDate": "2012-07-04T13:50:43.173-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "857638",
    "ThreadId": "357191",
    "Html": "<blockquote style=\"padding-bottom: 0px; font-style: italic; padding-top: 0px; padding-left: 0.25em; margin: 0.25em 1em 0px; padding-right: 0.25em; border: #ccc 0.1em solid;\"><strong>xinliu wrote:</strong><br />\r\n<p>The root of the problem was in attemps to use binary files that was downloaded from the Internet. Windows 8 prevents y!!ou from using such easy ways.</p>\r\n<p>First of all, you need to download files to your user's folder and unpack there.</p>\r\n<p>After that you need to unblock libraries (executables are ready for use immediately after you clicked the UAC confirmation).</p>\r\n<p>Only after finishing the steps described above, you can put the files to the 'Program Files' folder.</p>\r\n<p>The whole story is posted here:&nbsp;<a href=\"http://softwaretestingusingpowershell.com/2012/07/04/metro-automation-the-first-step/\">http://softwaretestingusingpowershell.com/2012/07/04/metro-automation-the-first-step/</a></p>\r\n</blockquote>\r\n<p><br />Wow, thanks xinliu!&nbsp; That solved the problems I was having.</p>",
    "PostedDate": "2012-07-04T22:51:29.807-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]