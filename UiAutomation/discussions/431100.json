[
  {
    "Id": "993045",
    "ThreadId": "431100",
    "Html": "\r\n<p>Hello.</p>\r\n<p>I&nbsp;needed to&nbsp;mess around with the UI module on full screen windows, specifically Google Chrome, and hit some issues. I want to let you know the work-arounds I found and ask if&nbsp;you happen to know an easier way.</p>\r\n<p>The situation is this - we have an application that uses a browser (Google Chrome) that must run as full screen (at least most of the time). And we need to programatically interact with the main window, at times.</p>\r\n<p>We used to start Chrome with the --kiosk switch. This puts it in full screen. It's a little different than going full screen by hitting F11, in the sense that you cannot &quot;go out&quot; of full screen if you are in kiosk mode&nbsp;- I guess it was designed\r\n specifically for kiosk applications.</p>\r\n<p>But when the window is full screen (either through kiosk switch, or through F11, does not matter), it cannot receive focus for some reason.</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:orangered\">$Window</span> <span style=\"color:gray\">=</span> Get<span style=\"color:gray\">-</span>UIAWindow <span style=\"color:gray\">-</span>Name <span style=\"color:#a31515\">'... - Google Chrome'</span>\r\n<span style=\"color:orangered\">$Window</span> | Set<span style=\"color:gray\">-</span>UIAFocus\r\n\r\nset<span style=\"color:gray\">-</span>uiafocus : Target element cannot receive focus.\r\nAt line:1 char:11\r\n<span style=\"color:gray\">&#43;</span> <span style=\"color:orangered\">$window</span> | set<span style=\"color:gray\">-</span>uiafocus\r\n<span style=\"color:gray\">&#43;</span>           ~~~~~~~~~~~~\r\n    <span style=\"color:gray\">&#43;</span> CategoryInfo          : NotSpecified: (:) <span style=\"color:gray\">[</span><span style=\"color:teal\">Set-UIAFocus</span><span style=\"color:gray\">]</span>, InvalidOperationException\r\n    <span style=\"color:gray\">&#43;</span> FullyQualifiedErrorId : System.InvalidOperationException,UIAutomation.Commands.SetUIAFocusCommand\r\n</pre>\r\n</div>\r\n<p>The error is very explicit.</p>\r\n<p>Also, if I'm trying to click on it nothing happens (it is not brought in foreground as I would expect). However, no error is given.</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:orangered\">$Window</span> | Invoke<span style=\"color:gray\">-</span>UIAControlClick\r\n</pre>\r\n</div>\r\n<p>&nbsp;What I noticed is that, if I get the windows while it is in normal mode, and afterwards put it full screen it will work, as long as I don't recreate the object. So we did not start Chrome in kiosk mode anymore.</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">#start Chrome normally</span>\r\n...\r\n<span style=\"color:green\"># Get the window </span>\r\n<span style=\"color:orangered\">$Window</span> <span style=\"color:gray\">=</span> Get<span style=\"color:gray\">-</span>UIAWindow <span style=\"color:gray\">-</span>Name <span style=\"color:#a31515\">'... - Google Chrome'</span>\r\n<span style=\"color:green\"># Set it full screen</span>\r\n<span style=\"color:orangered\">$Window</span> | Set<span style=\"color:gray\">-</span>UIAFocus | Set<span style=\"color:gray\">-</span>UIAControlKeys <span style=\"color:gray\">-</span>Text <span style=\"color:#a31515\">'{F11}'</span>\r\n<span style=\"color:green\"># Retain the window object (do not get it every time) to perform operations</span>\r\n<span style=\"color:orangered\">$Window</span> | Set<span style=\"color:gray\">-</span>UIAFocus\r\n<span style=\"color:orangered\">$Window</span> | Invoke<span style=\"color:gray\">-</span>UIAControlClick\r\n\r\n</pre>\r\n</div>\r\n<p>And now it works! But I'm not very sure why it did not work the first time. Is it something specific to full screen windows, or something specific to how Chrome implements it?</p>\r\n<p>Now just to be clear, we have a work-around&nbsp;which works nicely (for most part). I don't want this post to cause you to waste time for investigations, just wanted to let you know and maybe you hit this problem in the past and know of another (simpler)\r\n way to do it.</p>\r\n<p>One incovenience of the work-around is that someone could accidentally press F11 and put the windows out of full screen, which is not at all desirable. Starting Chrome in kiosk mode would have prevented this to happen. Which leads me to my second question\r\n :)</p>\r\n<p>Is there a way to determine the state of the window with ui module? I mean maximized, minimized, etc.</p>\r\n<p>Thanks in advance,</p>\r\n<p>Johnny.</p>\r\n",
    "PostedDate": "2013-01-28T06:08:45.513-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "993068",
    "ThreadId": "431100",
    "Html": "\r\n<p>Hello <a href=\"http://www.codeplex.com/site/users/view/JohnQuest\">JohnQuest</a>,</p>\r\n<p>I first address what I can answer promptly.</p>\r\n<p>1) window state - it's not implemented yet. However, I'm planning to include this in 0.8.4 (I'll include it in\r\n<a title=\"Beta 4\" href=\"http://uiautomation.codeplex.com/releases/view/100558\" target=\"_blank\">\r\nBeta 4</a> I think).</p>\r\n<p>Now you can perform this manually:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\"># obtain WindowPattern:</span>\n<span style=\"color:orangered\">$wp</span> <span style=\"color:gray\">=</span> (Start<span style=\"color:gray\">-</span>Process calc <span style=\"color:gray\">-</span>PassThru | Get<span style=\"color:gray\">-</span>UIAWindow).GetCurrentPattern(<span style=\"color:gray\">[</span><span style=\"color:teal\">System.Windows.Automation.WindowPattern</span><span style=\"color:gray\">]</span><span style=\"color:gray\">::</span>Pattern);\n<span style=\"color:green\"># use what the pattern offers:</span>\n\n<span style=\"color:green\"># it can't be maximized via WindowPattern</span>\n<span style=\"color:green\"># we can maximize Calculator by clicking on the Maximize button :)</span>\n<span style=\"color:orangered\">$wp</span>.Current.CanMaximize\n<span style=\"color:orangered\">$wp</span>.Current.CanMinimize\n<span style=\"color:orangered\">$wp</span>.Current.IsModal\n<span style=\"color:orangered\">$wp</span>.Current.IsTopmost\n<span style=\"color:orangered\">$wp</span>.Current.WindowInteractionState\n<span style=\"color:orangered\">$wp</span>.Current.WindowVisualState\n<span style=\"color:orangered\">$wp</span>.SetWindowVisualState(<span style=\"color:gray\">[</span><span style=\"color:teal\">System.Windows.Automation.WindowVisualState</span><span style=\"color:gray\">]</span><span style=\"color:gray\">::</span>Minimized);&nbsp;</pre>\r\n<pre># etc</pre>\r\n</div>\r\n<p>2) Regarding the question 'how to click the window', there's no problem.</p>\r\n<p>2.1) setting the focus won't work (I suspect that the underlaying level of element.SetFocus() the the\r\n<a title=\"SetForegroundWindow\" href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms633539%28v=vs.85%29.aspx\" target=\"_blank\">\r\nSetForegroundWindow</a> API call.</p>\r\n<h3>Remarks</h3>\r\n<p>The system restricts which processes can set the foreground window. A process can set the foreground window only if one of the following conditions is true:</p>\r\n<ul>\r\n<li>The process is the foreground process. <span style=\"color:#ff0000\">(is your powershell not the foreground process at the time of click?)</span>\r\n</li><li>The process was started by the foreground process. </li><li>The process received the last input event. </li><li>There is no foreground process. </li><li>The foreground process is being debugged. </li><li>The foreground is not locked (see <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms633532%28v=vs.85%29.aspx\">\r\n<strong>LockSetForegroundWindow</strong></a>). <span style=\"color:#ff0000\">(this may be true, I don't know)</span>\r\n</li><li>The foreground lock time-out has expired (see <strong>SPI_GETFOREGROUNDLOCKTIMEOUT</strong> in\r\n<a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms724947%28v=vs.85%29.aspx\">\r\n<strong>SystemParametersInfo</strong></a>). </li><li>No menus are active.&nbsp; </li></ul>\r\n<p>2.2) You need to run your powershell script from a host that is floating over all windows: UIARunner, UIAutomaitonSpy (yes, it could also run code though I'd suggest yu to use UIARunner), BGShell (0.8.0P5 for Metro testing).</p>\r\n<p>I noticed today that BGShell is no longer in my binaries - a couple of months ago a moved its folder and since then it is never wrapped in the release binaries. I'll fix it.</p>\r\n<p>After you run your script in a host that is above all windows, ir runs the following without any obstacles:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>Get<span style=\"color:gray\">-</span>UIAWindow <span style=\"color:gray\">-</span>n <span style=\"color:gray\">*</span>chrome | Invoke<span style=\"color:gray\">-</span>UIAControlClick;\n</pre>\r\n</div>\r\n<p></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-size:10pt\">Finally, I would say that Chrome could not be automated with MS UI Automation (unlike IE or FF), it's like a container (Pane or Document). All you can automate (as far I can predict) is toolbars, the navigation bar and similar\r\n things that at the top of Chrome window.</span></p>\r\n<p><span style=\"font-size:10pt\">Thanks for sharing the info, I've never heard about the --kiosk mode (though it's slightly similar to Metro UI apps).</span></p>\r\n",
    "PostedDate": "2013-01-28T06:56:54.233-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "993692",
    "ThreadId": "431100",
    "Html": "\r\n<p>The tricky part is that there is no difference between a normal (non-maximized) window and a full-screen window. The WindowVisualState property is\r\n<strong>Normal </strong>in both cases. So the WindowPattern is not helpful in this case.</p>\r\n<p>I searched some examples online and they all involved pinvoke, and comparing the screen size with the window size to asses if it runs full screen or not. Not very elegant, but I guess that is the only way.</p>\r\n",
    "PostedDate": "2013-01-29T07:44:33.847-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "993745",
    "ThreadId": "431100",
    "Html": "\r\n<p>If your show-stopper is inability to recognize the full-screen window, what's about such an one-liner:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">if</span> ((Get<span style=\"color:gray\">-</span>UIADesktop).Current.BoundingRectangle <span style=\"color:gray\">-eq</span> (Get<span style=\"color:gray\">-</span>UIAWindow <span style=\"color:gray\">-</span>Name <span style=\"color:gray\">*</span>chrome).Current.BoundingRectangle) { <span style=\"color:#a31515\">&quot;full screen&quot;</span>; } <span style=\"color:blue\">else</span> { <span style=\"color:#a31515\">&quot;else&quot;</span>; }\r\n</pre>\r\n</div>\r\nIt works even in two-display environment.\r\n<p></p>\r\n",
    "PostedDate": "2013-01-29T09:29:08.87-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "993801",
    "ThreadId": "431100",
    "Html": "\r\n<p>Excellent! You beat me up to it, I was&nbsp;wandering in the same area. This will work out nicely, after all.</p>\r\n<p>Thank you.</p>\r\n",
    "PostedDate": "2013-01-29T11:37:09.34-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]