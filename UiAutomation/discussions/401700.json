[
  {
    "Id": "935768",
    "ThreadId": "401700",
    "Html": "\r\n<p>Hello, it's me (again).</p>\r\n<p>I'm trying to use Invoke-UIAHotKey cmdlet, but since this does not accept pipeline input, I don't see a way to invoke a hot key onto another application.</p>\r\n<p>I also tried playing with Set-UIAControlKeys (Get-UIAWindow ... | Set-UIAControlKeys ...) but does not work as expected. I see the desired control highlighted, but then the hot key does not pass through. If I set a simple text (like 'test') and run in powershell\r\n console, the command returns True, and the text is output in the console.</p>\r\n<p>Is there a way to do this?</p>\r\n",
    "PostedDate": "2012-11-02T08:57:40.243-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "935863",
    "ThreadId": "401700",
    "Html": "<p>Hello again,</p>\r\n<p>if you need to send a hotkey (an accelerator key or access key), I can't offer much.</p>\r\n<p>First of all, an <a title=\"accelerator key\" href=\"http://msdn.microsoft.com/en-us/library/system.windows.automation.automationproperties.acceleratorkey(v=vs.95).aspx\" target=\"_blank\">accelerator key</a> is a well-known short cut like Ctrl+C and <a title=\"access key\" href=\"http://msdn.microsoft.com/en-us/library/system.windows.automation.automationproperties.accesskey(v=vs.95).aspx\" target=\"_self\">access key</a> is an Alt+{character} combination.</p>\r\n<p>You need to work with accelerator keys, don't you?</p>\r\n<p>Now, what we have:</p>\r\n<p>1) Invoke-UIAHotkey is a wrapper over the <a title=\"keyb_event\" href=\"http://msdn.microsoft.com/en-us/library/aa928103.aspx\" target=\"_blank\">keyb_event</a> API call. This call does not use handles, in other words, it sends keys to any receiver.&nbsp;</p>\r\n<p>I'd only suggest to use something like:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>Get<span style=\"color: gray;\">-</span>UIA<span style=\"color: gray;\">[</span><span style=\"color: teal;\">ControlType</span><span style=\"color: gray;\">]</span>; Invoke<span style=\"color: gray;\">-</span>UIAHotkey <span style=\"color: #a31515;\">\"...\"</span>&nbsp;</pre>\r\n<pre># or&nbsp;</pre>\r\n<pre>Get<span style=\"color: gray;\">-</span>UIA<span style=\"color: gray;\">[</span><span style=\"color: teal;\">ControlType</span><span style=\"color: gray;\">]</span> | Set<span style=\"color: gray;\">-</span>UIAFocus; Invoke<span style=\"color: gray;\">-</span>UIAHotkey <span style=\"color: #a31515;\">\"...\"</span>\r\n</pre>\r\n</div>\r\n</p>\r\n<p>depending on whether the contol support Set-UIAFocus or don't (UIA sometimes send a control to foreground without Set-UIAFocus).</p>\r\n<p>Note: I didn't write all the keys it can support, only letters and numbers.</p>\r\n<p>2) The Set-UIASendKeys cmdlet is just&nbsp;&nbsp;System.Windows.Forms.SendKeys.<span>SendWait</span>(<span>this</span>.Text);</p>\r\n<p>It accepts input, but it's not what you expect: for example, you send to it ten controls. It enumerates inputs and sends your keys ten times. It can send keys to a control as it also does not use handles.</p>\r\n<p>It returns true if there was no error on sending text (sometimes, error may raise, if you are running application under very powerless user, for example, and the window process you are trying to work with is of higher privilege level).</p>\r\n<p>3) The Set-UIAControlText cmdlet. If you need to put a text into a control and control has handle, it may be right choice. The cmdlet uses SendMessage to put the text you provided to a control with handle. Some third-party control may not support this.</p>\r\n<p>4) The Set-UIA[ControlType]Text cmdlets use ValuePattern to set the text. Sometimes, third-parties support this pattern.</p>\r\n<p>There are also specific API calls for controls derived from listview, listbox, treeview, and so on. I didn't create cmdlets for these (we simply never need).</p>\r\n<p>&nbsp;</p>\r\n<p>If nothing of four options above is your result, I'd suggest you to run spy++ and find out what your control uses:</p>\r\n<p>1) run spyxx.exe (VS 2010 or 2012)</p>\r\n<p>2) Spy | Log Messages ... (Ctrl+M)</p>\r\n<p>3) drag the Finder Tool and drop it onto your control</p>\r\n<p>4) go to the Messages tab</p>\r\n<p>5) There you may select all (very difficult to dig out the right result) or check Message Groups (a type of control, Keyboard and Mouse)</p>\r\n<p>6) press OK and work with the control using mouse and/or keyboard</p>\r\n<p>7) Messages | Stop Logging or F8</p>\r\n<p>After that you need to learn what has happened when you did an action. After several attempts, one usually gets fast enough to start logging just by the time of manual test and stop it immediately after manual test. :)</p>\r\n<p>&nbsp;</p>\r\n<p>Alternatively, you may ask the guy who writes the UI to create a new project with form, copy controls from your project and paste controls to a new form, and compile it. I.e., to make an empty, fake form, replica of your application. And put it somewhere on a web file share. I can try to learn what the control(s) is/are and how it/they work(s).</p>",
    "PostedDate": "2012-11-02T12:44:54.987-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]