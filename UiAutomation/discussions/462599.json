[
  {
    "Id": "1108814",
    "ThreadId": "462599",
    "Html": "Hello, \r<br />\n<br />\nI am wondering if we could parallelize some tests with UIAutomation?\r<br />\nIt's for testing an app available in 40 countries and I have to check if every version if OK.\r<br />\n<br />\nThanks.<br />\n",
    "PostedDate": "2013-10-17T08:10:27.713-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1108849",
    "ThreadId": "462599",
    "Html": "Hi mayela,\r<br />\nwhat type of parallelization do you mean?\r<br />\n<br />\nThere are two types known to me:\r<br />\n1) FitNesse by Uncle Bob + powerslim by K. Vlasenko\r<br />\nThe classic way to run tests is to type PowerShell code in FitNesse tables and the PowerShell slim runner runs tests in parallel, on several hosts and/or several instances per host, even under various credentials.\r<br />\n<br />\nPersonally, I don't like this way as there is the need to write a lot of pipe characters on the FitNesse pages and there are two sets of global variables, FitNesse variables and powerslim global variables, with the need to set values from those to these, with a number of curly braces.\r<br />\n<br />\nThis is parallelization on the command level, i.e. every command/one-liner is running on all instances simultaneously.\r<br />\nYou have the result of each line/bunch of code only after all instances finished or failed.\r<br />\n<br />\n2) I use test step parallelization. I wrote a PowerShell framework (later, I'm planning to rewrite it in C# cmdlets, maybe) that does these actions:<br />\n<ul>\n<li>reads XML with info about hosts (hostname/IP, credentials if needed, host type in test, etc)</li>\n<li>reads XML with test steps (name of step, step order, type of host where the step should be run, numbers of 'user stories' to run, etc</li>\n<li>generates RDP files (the New-UIARemoteDesktopProtocolFile cmdlet available in 0.8.6Beta 5)\r<br />\n-- hosts already have the Starter RemoteApp loaded in the Registry</li>\n<li>distributes tests to test hosts, generates Starter.cmd for the step to be run on test hosts</li>\n<li>\nstart RDP sessions to hosts\r<br />\nAfter that, RemoteApp start on hosts and run tests (for example, my tests are Starter.cmd that run powershell.exe with a lot parameters the test runner generated from XML). I'm sitting on the central test console and could see if I would see several GUI tests, even the same tests, from test hosts sent to the central test console.\r<br />\nAfter step finished, failed or not started, the central test runner gets test results, logs, anything alse useful and writes to the folder structure on the central test station.<br />\n</li>\n</ul>\nTest hosts should have ~2GB RAM for my tests, the central test console has only 768MB as RemoteApps work on remote hosts almost not consuming resources of the central host.\r<br />\n<br />\n3) There is also a simple way to run tests in parallel (the user should check twice the code as it's easy to try to get controls of the second app from the window of the first app :)):<br />\n<pre><code>calc; calc; calc; sleep -Seconds 3; Get-UIAWindow -n *calc* | Get-UIAButton 1 | Invoke-UIAButtonClick;</code></pre>\n\n",
    "PostedDate": "2013-10-17T09:05:15.693-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1108856",
    "ThreadId": "462599",
    "Html": "If you are planning to use the way 3, I'd recommend to test thoroughly your tests on one instance, test tests on two instances, turn off highlighters and minimize all that possible, and finally run tests on several instances.<br />\n",
    "PostedDate": "2013-10-17T09:09:16.153-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1109084",
    "ThreadId": "462599",
    "Html": "Hi\r<br />\n<br />\nFirst, thank you for replying so fast!\r<br />\n<br />\nTwo, I'm sorry if I make mystake (French guy).\r<br />\n<br />\nThree, I should have give you more details on this project. \r<br />\n<br />\nOur client wants to have availability rate of our silverlight app by country. So my coworkers are developping a main program, which start my PS scripts to check availabity of the app for a country. If an app fail, the main program will restart it, regardless of the other scripts potentially started at the same time. My job is to write the PS scripts, which can be parallelized. \r<br />\n<br />\nSo I've tried the third way with two instances, it work well. I propose a script which start 4 or 5 app at the same time, but it won't fit because if an app fail, we can't restart it alone...\r<br />\n<br />\nSo I will try the second way. Can you give me the name of your framework?\r<br />\n<br />\nThank you again for your time and ideas.<br />\n",
    "PostedDate": "2013-10-18T00:58:26.08-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1109100",
    "ThreadId": "462599",
    "Html": "Hi,<br />\nI'm not keen on using Silverlight apps and many other modern things as the company I'm working now and the previous one both work in the area of system administration, their UIs are often Win32, WinForms, rarely WPF (system administrators are considered to be austere in terms of usability:)).<br />\n<br />\n1) First of all, what is your test app from the test scripts' perspective? An independent app in the container your coworkers made or a browser add-in?<br />\nAs you could use the way #3, your application under test is something like an app (<em>.exe, </em>.dll)?<br />\n<br />\n2) What does the phrase about availability for a country mean? Testing with separate Urls, testing with separate language settings?<br />\n<br />\n3) Why do you want to run tests for localization/availability in parallel? It's not a performance test. A big time to test? TMX (an underlaying library to UIA and a separate framework at the same time) now supports platforms, so that you could run tests consequently with results grouped by platform (platform is a string like 'Windows 2012' or 'country #9').<br />\n<br />\n4) If you suffer from failures in tests, there are 'mild' cmdlets that don't stop tests. (If your app fails and test is unable to restart it, test stops of course).<br />\nWait-UIAWindow, Test-UIAControlState, Wait-UIAControlState, Wait-UIA[ControlType]IsEnabled, Wait-UIA[ControlType]IsVisible<br />\nin latest betas of 0.8.6, they are of a good quality and some bugs are fixed<br />\n<br />\nRegarding the framework, it's not public yet. My employer does not apply restriction to test engines (only to product-oriented scripts) in terms of publicity, so that I could publish it today, after converting testers' tips to an instruction and some testing of the framework.<br />\nI just wanted to say that there might be a way to simplify the task vs brute-force testing of many instances in parallel?<br />\nupd: the framework is oriented on domain infrastructure (though could be adapted to workgroups). Also, I need to change a couple of XMLs to separate infrastructure data from company products' related data.<br />\n",
    "PostedDate": "2013-10-18T01:35:38.267-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1109125",
    "ThreadId": "462599",
    "Html": "Hi<br />\n<br />\n1) It's a silverlight web app, so a browser add-in. I use Firefox to access it, which allow to run profils on different processes.<br />\n<br />\n2) Each version of the app is accessed by an url of this type : <a href=\"https://app.company.fr/COUNTRY\" rel=\"nofollow\">https://app.company.fr/COUNTRY</a> . We want to test each urls to calculate availability rate (99,99% for example). <br />\n<br />\n3) It's one of the client's specifications. We have to check 4 scenarios for the 40 countries in 15 minutes. So we have no choice to parallelize the tests. I'm interessed by TMX, I will look to it.<br />\n<br />\n4) I already use some of this cmdlets in my scripts to check if the datas are fully charged (charging the list of all clients for example). <br />\nTwo things that stopped us to use Way 3. <br />\n<ol>\n<li>The first I've tried to explain previously. If we parallelize 4 countries at a time (countries : SENEGAL, GHANA, GABON, CAMEROUN) and GHANA is down but others are up. The client would like to restart the execution of GHANA and still continue the execution of the 3 other ones. I don't see a way to do this, but maybe there is one.</li>\n<li>\nOne of the scenarios is to search a client int the database, but each country have his own client's database, unless we put a test client in all database, we have some unique data in each instance.<br />\n</li>\n</ol>\nHope you understand what I try to explain.<br />\nFor the framework, I think it was like this one on codeplex so I understand if your employer won't let you make it public.<br />\n<br />\nThanks again for your time.<br />\n",
    "PostedDate": "2013-10-18T02:48:53.647-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1109140",
    "ThreadId": "462599",
    "Html": "Well, I got the idea what you need.<br />\nThe framework could not be published at least until the time after this weekend as I remembered that I need to change here and there, and supply with some samples (and remove product-oriented modules, and put samples instead of them).<br />\n<br />\n<strong>However, right now I'll explain the idea you probably could exploit.</strong><br />\nIn the framework there are an XML file for hosts (let's call it hosts.xml)<br />\nEvery host is an XML section and have a parameter 'role'. It's a string like 'console', 'agent', 'solo' (the last is for GUI-only tests)<br />\n&lt;host&gt;&lt;hostname&gt;h1&lt;/hostname&gt;&lt;role&gt;console&lt;/role&gt;&lt;/host&gt;<br />\n&lt;host&gt;&lt;hostname&gt;h2&lt;/hostname&gt;&lt;role&gt;console,agent&lt;/role&gt;&lt;/host&gt;<br />\n&lt;host&gt;&lt;hostname&gt;h3&lt;/hostname&gt;&lt;role&gt;agent&lt;/role&gt;&lt;/host&gt;<br />\n<br />\nThere are also an XML file with steps, it's called workflow.xml<br />\nEvery step is a section, one parameter is role.<br />\n&lt;step&gt;&lt;name&gt;super test 1&lt;/name&gt;&lt;role&gt;console&lt;/role&gt;&lt;/step&gt;<br />\n&lt;step&gt;&lt;name&gt;super test 2&lt;/name&gt;&lt;role&gt;agent,console&lt;/role&gt;&lt;/step&gt;<br />\n&lt;step&gt;&lt;name&gt;super test 3&lt;/name&gt;&lt;role&gt;agent&lt;/role&gt;&lt;/step&gt;<br />\n<br />\nThese two files are used to separate tests automatically between hosts of various roles. I mean that all hosts of role 'console' run the step the requires hosts of the 'console' role. No precedence, just all of that role.<br />\nHosts h1, h2 run steps 'super test 1', 'super test 2'<br />\nhosts h2, h3 run step 'super test 2'<br />\nhost h3 runs also step 'super test 3'<br />\n<br />\nOn the central test console, host lists are just ArrayLists: $ConsoleCollection = New-Object System.Collections.ArrayList;<br />\n<br />\nNow, let's see which fate suffer hosts and test steps.<br />\nTest step could be passed - OK, loading test report to the test console<br />\nTest step could be interrupted by timeout - FAIL, killing processes<br />\nTest step could be hung - FAIL, killing processes<br />\nTest step could be not even run (the user visited that host and forgot to log off. Policies don't permit more than one session) - FAIL, nothing to kill, just to close an RDP window<br />\nand several other variants with FAIL, loading logs and preliminary data onto the central test console<br />\n<br />\nWhat the test console does about hosts that failed? It removes such hosts from a collection the step requires (console collection or agent collection, etc).<br />\nfor example, the the host h1 is removed from the console collection<br />\n<br />\nIt was just an intro, the <strong>recommendation</strong> is much shorter:<br />\nuse array/collection/queue/list to hold your country pointers (Urls, for example). It is a TODO collection.<br />\n<ul>\n<li>If a country passes, you need to <strong>remove</strong> <strong>successful</strong> link from the TODO collection (maybe, with adding it to OK collection or writing in gold letters to somewhere:)) and load new countries</li>\n<li>If a country fails, you need to <strong>left</strong> the <strong>failed</strong> country for the next test run.</li>\n<li>\nIf all countries passed, just remove all of them and load next countries.<br />\nIf I've got it right, you could set a list of countries/links, and your tests will load countries from the list until the collection is empty.<br />\nJust a big do/while in simple words.<br />\n</li>\n</ul>\nCould it help?<br />\n",
    "PostedDate": "2013-10-18T03:41:34.133-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1109229",
    "ThreadId": "462599",
    "Html": "Hi, \r<br />\n<br />\nI had a meeting with my coworker to see if your framework could fit our needs.\r<br />\nWe have to change some rules, but it definitly worth a try.\r<br />\nIf it works, it could simplify the main program so less work to do for my coworkers.\r<br />\n<br />\nAs soon as could work with your framework, I will have to make a proof of concept.\r<br />\nI will let you know about my progress.\r<br />\n<br />\nAgain, thank you! :)<br />\n",
    "PostedDate": "2013-10-18T07:44:24.647-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1109261",
    "ThreadId": "462599",
    "Html": "Okay, here is the part that is now requires manual intervention:<br />\n1) on test hosts (hosts your central test console will be connecting to) you need to load these three regs:<br />\n<pre><code>Windows Registry Editor Version 5.00\n\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Terminal Server Client]\n&quot;RemoteDesktop_SuppressWhenMinimized&quot;=dword:00000002</code></pre>\n\n<pre><code>Windows Registry Editor Version 5.00\n\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Terminal Server Client]\n&quot;RemoteDesktop_SuppressWhenMinimized&quot;=dword:00000002\n</code></pre>\n\n<pre><code>Windows Registry Editor Version 5.00\n\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Terminal Server\\TSAppAllowList]\n&quot;fDisabledAllowList&quot;=dword:00000001\n\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Terminal Server\\TSAppAllowList\\Applications]\n\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Terminal Server\\TSAppAllowList\\Applications\\Starter]\n&quot;Name&quot;=&quot;Starter&quot;\n&quot;Path&quot;=&quot;C:\\\\TestHome\\\\Starter.cmd&quot;</code></pre>\n\nAs can be seen, you need to create C:\\testhome on test hosts (the framework creates) and put there some Starter.cmd (the frameworks generates cmds). The folder path and the command file names are default and now there are no ways to change them (just hard-coded in PowerShell code in a couple of places).<br />\nI'm not sure whether restart of hosts is needed.<br />\n<br />\nOf course, Remote Desktop connections should be enabled (Control panel -&gt; system -&gt; remote) and the user your tests will be running under is allowed to access remotely.<br />\n<br />\n2) you need to test the New-UIARemoteDesktopProtocolFile cmdlet:<br />\nI use the following code:<br />\n<pre><code>                New-UIARemoteDesktopProtocolFile -Path &quot;$($TestHome)\\$($hostObject.Hostname).RDP&quot; `\n                    -Domain $hostObject.Domain -Username $hostObject.Username -Password $hostObject.Password -Hostname $hostObject.Hostname `\n                    -RemoteAppMode -RemoteAppProgram Starter `\n                    -DesktopHeight 768 -DesktopWidth 1024 -DisableWallpaper $true -DisableThemes $true -Autoreconnection $true `\n                    -ShellWorkingDir &quot;$($TestHome)&quot; `\n                    -SmartSizing;</code></pre>\n\nThe -Path param is to where output the RDP file. Credentials (the three following parameters) are strings like mydomain testadmin pas$w0rd. Starter is the name of RemoteApp. -ShellWorkingDir is c:\\testhome.<br />\nOther parameters are used by default, you may play with them if you want. The above is what works for us.<br />\n<br />\nThe result is an *.rdp file, inside you should see all these settings and many others. Password is encrypted. You need to test the file manually to ensure that it connects to a test host.<br />\nThe framework produces such files in the cycle of loading main config data, one file per host.<br />\nThe framework clicks out about five types of dialogs that could appear (you couldn't save passwords, no certificate, etc, etc) so don't worry about dialogs. You can also click them out manually with check box 'remember the settings' ON where applicable.<br />\n<br />\n3) You can already test some scripts.<br />\nA typical Starter.cmd is:<br />\n<pre><code>chcp 65001\nC:\ncd C:\\TESTHOME\necho &quot;deleting the finished flag&quot; &gt;&gt; C:\\TESTHOME\\sut_started 2&gt;&gt; C:\\TESTHOME\\sut_started_errors\ndel C:\\TESTHOME\\finished /f /q &gt; C:\\TESTHOME\\finished_report.txt 2&gt; C:\\TESTHOME\\finished_errors.txt\npowershell.exe -sta -noninteractive -executionpolicy bypass -command &quot;&amp; { $global:TestHome = 'C:\\TESTHOME';  $previousResults = @{}; $previousResults.Add('a','http://vl-at-sp:7777/');  $params = @{}; $params.Add('a','outcast\\sp_user_004'); C:\\TESTHOME\\tests\\Common\\StartTests.ps1  -ProductCode abcd -Requirement @('1234') -ProductUninstallName ''  -ClearProductData $false  -InstallProduct $false  -BuildPath ''  -MsiName our_setup.msi  -PreviousResults $previousResults  -Parameters $params  -TestSuiteName 'Iteration xyz'  -TestScenarioName 'my test scenario 333'  -TestScenarioId '1234'  -ProductAcronym ABCD  -TestPlatform 'Windows 2008 R2 with SP 2010 Foundation'  -Timeout 1200  -BannerTop 100 ; }&quot; &gt;&gt; C:\\TESTHOME\\sut_started 2&gt;&gt; C:\\TESTHOME\\sut_started_errors\necho &quot;test finished in some way&quot; &gt; C:\\TESTHOME\\finished\nlogoff</code></pre>\n\n4) Now it's time to test<br />\nput binaries in c:\\testhome\\modules (the default path the frameworks expects, it puts all during deployment of tests), for example c:\\testhome\\modules\\uiautomation*.*<br />\ntry to run via RDP something like (let's your test runner is called my_runner.ps1):<br />\n<pre><code>chcp 65001\nC:\ncd C:\\TESTHOME\necho &quot;deleting the finished flag&quot; &gt;&gt; C:\\TESTHOME\\sut_started 2&gt;&gt; C:\\TESTHOME\\sut_started_errors\ndel C:\\TESTHOME\\finished /f /q &gt; C:\\TESTHOME\\finished_report.txt 2&gt; C:\\TESTHOME\\finished_errors.txt\npowershell.exe -sta -noninteractive -executionpolicy bypass -command &quot;&amp; { $global:TestHome = 'C:\\TESTHOME';  C:\\TESTHOME\\my_runner.ps1; }&quot; &gt;&gt; C:\\TESTHOME\\sut_started 2&gt;&gt; C:\\TESTHOME\\sut_started_errors\necho &quot;test finished in some way&quot; &gt; C:\\TESTHOME\\finished\nlogoff</code></pre>\n\nmy_runner.ps1 could be something like<br />\n<pre><code>ipmo &quot;$($TestHome)\\Modules\\UIAutomation&quot;;\nipmo &quot;$($TestHome)\\Modules\\UIAutomation\\TMX.dll&quot;;\n[UIAutomation.Preferences]::BannerLeft = 100;\n[UIAutomation.Preferences]::BannerTop = 100;\nShow-UIABanner &quot;A Calculator test on $(hostname)&quot;;\nStart-Process calc -PassThru | Get-UIAWindow | Get-UIAButton 1 | Invoke-UIAButtonClick;\nsleep -Seconds 10;</code></pre>\n\nall I wrote in the script you should see from the central test console, the banner and calc.exe.<br />\nYou easily could run several RDP files to various hosts at the same time, i.e. in parallel.<br />\n<br />\nWe used this from Windows 7 and Windows 2008 R2 (the central test console) and to Windows 8 (x64, x86), 2008R2, 2012, 2012R2 Preview (test hosts).<br />\n",
    "PostedDate": "2013-10-18T08:57:46.583-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1109992",
    "ThreadId": "462599",
    "Html": "Hi,\r<br />\n<br />\nSo, this morning I have made a virtual server to run some test on.\r<br />\nThe registry key have been loaded, the testhome directory, the Starter.cmd and my_runner.ps1 have been created, and UIAutomation has been loaded.\r<br />\n<br />\nI have generated some rdp files on my computer to test and it's working!\r<br />\nI can see the calculator and the banner on my sceen.\r<br />\n<br />\nNow, I'm trying to run several test at the same time. I will come back later with some results.<br />\n",
    "PostedDate": "2013-10-21T06:43:10.877-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1110007",
    "ThreadId": "462599",
    "Html": "Hi,\r<br />\nI'm glad to hear that it works.\r<br />\nIn addition, below are fragments of the framework.\r<br />\nHow to tell the test on a host which platform to use, for example, my platform are hosts' platforms:<br />\n<pre><code># if host name contains information like w2k12-en-sp2010\nNew-TMXTestPlatform -Name (hostname) -Id (hostname);\n# any string is also possible:\nNew-TMXTestPlatform -Name $TestPlatform -Id $TestPlatform;\n# after that you can use any TMX cmdlets, their test results will be attached to the platform\n$null = New-TMXTestSuite -Name &quot;$($suiteName)&quot;;\n$null = Add-TMXTestScenario -Name &quot;$($scenarioName)&quot; -Id &quot;001&quot;;</code></pre>\n\nHow to export test results ('automatic' test results are those that generated by UIAutomation automatically via [UIAutomation.Preferences]::EveryCmdletAsTestResult):<br />\n<pre><code>Export-TMXTestResults -As XML -Path &quot;$($TestHome)\\Reports\\rdp.xml&quot; -ExcludeAutomatic;</code></pre>\n\nThe central console loads test results:<br />\n<pre><code>Import-TMXTestResults -As XML -Path &quot;\\\\$($hostname)\\C$\\TestHome\\Reports\\rdp.xml&quot;;</code></pre>\n\nTMX is the same that is wrapped in the corresponding UIAutomation release package.<br />\n",
    "PostedDate": "2013-10-21T07:09:54.793-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1110056",
    "ThreadId": "462599",
    "Html": "Hi, \r<br />\n<br />\nI succesfully launched 2 instances of your examples with calc, but I can't do it with Firefox...\r<br />\nI work on my computer and one virtual 2008 R2 server with TSE role installed.\r<br />\nIt's basicly the same script, except it launch Firefox instead of calc. <br />\n<pre><code>ipmo &quot;C:\\TestHome\\Modules\\UIAutomation&quot;;\nipmo &quot;C:\\TestHome\\Modules\\UIAutomation\\TMX.dll&quot;;\n$env:MOZ_NO_REMOTE = 1; # To start Firefox in an other process if already exist\n[UIAutomation.Preferences]::BannerLeft = 100;\n[UIAutomation.Preferences]::BannerTop = 100;\nShow-UIABanner &quot;A Firefox test on $(hostname)&quot;;\n$ProcId = Start-Process 'C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe' -PassThru | Get-Process | % { echo $_.id };\nGet-UIAWindow -pid $ProcId;\nsleep -Seconds 5;\nGet-UIAWindow -pid $ProcId | Get-UIAButton -AutomationId &quot;Close&quot; | Invoke-UIAButtonClick;</code></pre>\n\nI will see tomorow as soon as I finish my other tasks. \r<br />\n<br />\nThanks<br />\n",
    "PostedDate": "2013-10-21T08:39:18.547-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1110077",
    "ThreadId": "462599",
    "Html": "Hmm, this way to parallelize was initially considered as &quot;several hosts, one instance per host&quot;.<br />\n<br />\nThe problem that it's not so easy to run two separate instances of Firefox, I tried this <a href=\"https://support.mozilla.org/en-US/questions/941353\" rel=\"nofollow\">https://support.mozilla.org/en-US/questions/941353</a><br />\nbut failed to get two processes (the second instance knows about the first):<br />\n<pre><code>$firefoxPath = (Get-ChildItem ${env:ProgramFiles(x86)}\\Mozilla*Firefox\\firefox.exe).FullName\nStart-Process $firefoxPath -ArgumentList &quot;-profile&quot;,&quot;%temp%\\ffprof&quot;,&quot;-no-remote&quot; -PassThru | Get-UIAWindow -Seconds 10;</code></pre>\n\nAlso I noticed, that setting the variable in powershell.exe is not enough. Firefox runs outside powershell.exe, so that you need to set it in Control panel/System (i.e., per system, not per session).<br />\n<br />\nYou could learn how to run Firefox as a separate process (i.e., several instances) or I'd suggest using Selenium here to run several processes.<br />\nThere are old cmdlets sepsx.codeplex.com 0.4.7 (I'm not sure that they would work with the latest Firefox). The code is something like:<br />\n<pre><code>Start-SeFirefox -Count 3  | ConvertTo-SeAutomationElement | %{ Get-UIAWindowFromHandle $_.Current.NativeWindowHandle; }</code></pre>\n\nIf the old version failed to run with the contemporary Firefox, you could try manual call from PowerShell: <a href=\"http://huddledmasses.org/did-you-know-powershell-can-use-selenium/\" rel=\"nofollow\">http://huddledmasses.org/did-you-know-powershell-can-use-selenium/</a><br />\n",
    "PostedDate": "2013-10-21T09:24:14.45-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1110498",
    "ThreadId": "462599",
    "Html": "Hi, <br />\n<br />\nI have submited my results to the project manager and he will try to get an esx server to run some test vm.<br />\nSo, I installed a Windows 7 and a Windows 8 vm to test.<br />\nI've created the registry keys, copied the scripts in C:\\TestHome, configure rdp but it won't work like yesterday on 2008 R2 Server...<br />\n<br />\nThe RemoteApp window open and close a few seconds later without launch starter.cmd.<br />\n<br />\nThere is my starter.cmd : <br />\n<pre><code>chcp 65001\nC:\ncd C:\\TESTHOME\necho &quot;deleting the finished flag&quot; &gt;&gt; C:\\TESTHOME\\sut_started 2&gt;&gt; C:\\TESTHOME\\sut_started_errors\ndel C:\\TESTHOME\\finished /f /q &gt; C:\\TESTHOME\\finished_report.txt 2&gt; C:\\TESTHOME\\finished_errors.txt\npowershell.exe -sta -noninteractive -executionpolicy bypass -command &quot;&amp; { $global:TestHome = 'C:\\TESTHOME';  C:\\TESTHOME\\my_runner.ps1; }&quot; &gt;&gt; C:\\TESTHOME\\sut_started 2&gt;&gt; C:\\TESTHOME\\sut_started_errors\n#powershell.exe -sta -noninteractive -executionpolicy bypass -command &quot;&amp; { $global:TestHome = 'C:\\TESTHOME';  C:\\TESTHOME\\Total_scenarii_v1.ps1; }&quot; &gt;&gt; C:\\TESTHOME\\sut_started 2&gt;&gt; C:\\TESTHOME\\sut_started_errors\necho &quot;test finished in some way&quot; &gt; C:\\TESTHOME\\finished\nlogoff</code></pre>\n\nMy my_runner.ps1 :<br />\n<pre><code>ipmo &quot;C:\\TestHome\\Modules\\UIAutomation&quot;;\nipmo &quot;C:\\TestHome\\Modules\\UIAutomation\\TMX.dll&quot;;\n[UIAutomation.Preferences]::BannerLeft = 100;\n[UIAutomation.Preferences]::BannerTop = 100;\nShow-UIABanner &quot;A Firefox test on $(hostname)&quot;;\n$FFPath = &quot;C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe&quot;\nStart-Process $FFPath -PassThru | Get-UIAWindow\nsleep -Seconds 5;\nGet-UIAWindow -pn Firefox | Get-UIAButton -AutomationId &quot;Close&quot; | Invoke-UIAButtonClick;</code></pre>\n\nAnd the script to create rdp files : <br />\n<pre><code>ipmo UIAutomation\n\n$testhome = &quot;C:\\TestHome&quot;\n$hostObject = New-Object -TypeName PSObject\n$hostObject | Add-Member -membertype NoteProperty -Name Hostname -value &quot;XX.XX.XX.XX&quot;\n$hostObject | Add-Member -membertype NoteProperty -Name Domain -value &quot;Win8-Total&quot;\n$hostObject | Add-Member -membertype NoteProperty -Name Username -value &quot;User&quot;\n$hostObject | Add-Member -membertype NoteProperty -Name Password -Value &quot;*******&quot;\n\nNew-UIARemoteDesktopProtocolFile `\n   -Path &quot;$($TestHome)\\$($hostObject.Domain).RDP&quot; `\n   -Domain $hostObject.Domain `\n   -Username $hostObject.Username `\n   -Password $hostObject.Password `\n   -Hostname $hostObject.Hostname `\n   -RemoteAppMode `\n   -RemoteAppProgram &quot;Starter&quot; `\n   -DesktopHeight 768 `\n   -DesktopWidth 1024 `\n   -DisableWallpaper $true `\n   -DisableThemes $true `\n   -Autoreconnection $true `\n   -ShellWorkingDir &quot;$($TestHome)&quot; `\n   -SmartSizing;</code></pre>\n\nDo you have some tips to enable Remote App on Win7 Pro and Win8 Pro?<br />\n<br />\nThanks <br />\n",
    "PostedDate": "2013-10-22T05:06:58.67-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1110519",
    "ThreadId": "462599",
    "Html": "Hi,<br />\nthere's nothing special in connection to hosts Windows 7 and 8.<br />\nPractically, RDP files are the same with exclusion to hostname/IP.<br />\nA typical RDP file is as follows:<br />\n<pre><code>screen mode id:i:1\nuse multimon:i:0\ndesktopwidth:i:1024\ndesktopheight:i:768\nsmart sizing:i:1\nsession bpp:i:32\nwinposstr:s:0,1,63,37,1200,900\ncompression:i:1\nkeyboardhook:i:2\naudiocapturemode:i:0\nvideoplaybackmode:i:1\nconnection type:i:7\nnetworkautodetect:i:1\nbandwidthautodetect:i:1\ndisplayconnectionbar:i:1\nenableworkspacereconnect:i:0\ndisable wallpaper:i:1\nallow font smoothing:i:0\nallow desktop composition:i:0\ndisable full window drag:i:1\ndisable menu anims:i:1\ndisable themes:i:1\ndisable cursor setting:i:0\nbitmapcachepersistenable:i:1\naudiomode:i:2\nredirectprinters:i:0\nredirectcomports:i:0\nredirectsmartcards:i:0\nredirectclipboard:i:0\nredirectposdevices:i:0\nautoreconnection enabled:i:1\nauthentication level:i:2\nprompt for credentials:i:0\nnegotiate security layer:i:1\nremoteapplicationmode:i:1\nremoteapplicationprogram:s:Starter\nremoteapplicationcmdline:s:\nalternate shell:s:\nshell working directory:s:C:\\TESTHOME\ngatewayhostname:s:\ngatewayusagemethod:i:4\ngatewaycredentialssource:i:4\ngatewayprofileusagemethod:i:0\npromptcredentialonce:i:0\nuse redirection server name:i:0\nrdgiskdcproxy:i:0\nkdcproxyname:s:\ndrivestoredirect:s:\nfull address:s:vl-at-sp.castaway.at.local\nusername:s:spmgmtaccount\ndomain:s:outcast\npassword 51:b:01000000D08C9DDF0115D1118C7A00C04FC297EB010000007316A69DA920C849B349AC509F984D060400000008000000700073007700000003660000C000000010000000E39D08B7665AEA823C94F185F2ED9A3A0000000004800000A000000010000000B190DEA0A4134DA4DAF3947BBB5DFA0418000000456FE4F550C26353780C5EB361018788DF321F2986CD5A67140000003EAEA9B40A02ECA2BB94B92081E89C5E15CDC036</code></pre>\n\nSteps to troubleshoot:<br />\n1) log on on a workstation (a test host with Windows 7/8)<br />\n2) open cmd.exe, run goto c:\\testhome, run starter.cmd<br />\n3) if it failed, make it workable. If it works, go to the next item<br />\n3.1) If Starter.cmd doesn't work: initially I used a tip from stackoverflow to support Unicode in cmd (an empty string before chcp) as people here used to use cyrillic for name of user stories :) Sometimes test didn't run (starter.cmd) so I removed the empty line. I think you could also remove the string with chcp.<br />\n3.2) all that works with the finished file could be removed: this is just a flag for the framework. Try without these lines.<br />\n4) create an RDP file, compare it with mine. If there is difference except for domain/user/password/hostname, copy/paste your data in my file and run it<br />\n5) Probably, I forgot to mention the following setting on test hosts: fDisabledAllowList. The reg file below is from the Registry of my test machine Windows 8 x86:<br />\n<pre><code>Windows Registry Editor Version 5.00\n\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Terminal Server\\TSAppAllowList]\n&quot;LicenseServers&quot;=hex(7):00,00\n&quot;CertificateIssuedBy&quot;=&quot;&quot;\n&quot;LicensingType&quot;=dword:00000005\n&quot;fHasCertificate&quot;=dword:00000000\n&quot;CertificateExpiresOn&quot;=&quot;&quot;\n&quot;CentralLicensing&quot;=dword:00000000\n&quot;fDisabledAllowList&quot;=dword:00000001\n&quot;CertificateIssuedTo&quot;=&quot;&quot;\n&quot;CustomRDPSettings&quot;=&quot;authentication level:i:2&quot;\n\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Terminal Server\\TSAppAllowList\\Applications]\n\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Terminal Server\\TSAppAllowList\\Applications\\Starter]\n&quot;Name&quot;=&quot;Starter&quot;\n&quot;Path&quot;=&quot;C:\\\\TestHome\\\\Starter.cmd&quot;</code></pre>\n\n6) I use the following Group Policy settings (along with incoming rdp connections enabled in Windows Firewall settings) in a test domain:<br />\n<strong><em>Administrative Templates -&gt;</em></strong><br />\nPolicy definitions (ADMX files) retrieved from the local machine.<br />\n<strong><em>Windows Components/Remote Desktop Services/Remote Desktop Connection Client</em></strong><br />\nAllow .rdp files from unknown publishers\tEnabled\t<br />\nAllow .rdp files from valid publishers and user's default .rdp settings\tEnabled\t<br />\nConfigure server authentication for client\tEnabled\t<br />\nAuthentication setting:\tAlways connect, even if authentication fails<br />\n<strong><em>Windows Components/Remote Desktop Services/Remote Desktop Session Host/Connections</em></strong><br />\nAllow users to connect remotely using Remote Desktop Services\tEnabled\t<br />\nAutomatic reconnection\tEnabled\t<br />\nLimit number of connections\tEnabled\t<br />\nRD Maximum Connections allowed\t1<br />\nType 999999 for unlimited connections.<br />\nRestrict Remote Desktop Services users to a single Remote Desktop Services session\tEnabled\t<br />\nSet rules for remote control of Remote Desktop Services user sessions\tEnabled\t<br />\nOptions:\tFull Control without user's permission<br />\n<strong><em>Windows Components/Remote Desktop Services/Remote Desktop Session Host/Remote Session Environment</em></strong><br />\nAlways show desktop on connection\tDisabled\t<br />\nLimit maximum number of monitors\tEnabled\t<br />\nMaximum Monitors\t1<br />\nRemove &quot;Disconnect&quot; option from Shut Down dialog\tEnabled\t<br />\nStart a program on connection\tEnabled\t<br />\nProgram path and file name\tc:\\testhome\\starter.cmd<br />\nWorking Directory\tc:\\testhome<br />\n<strong><em>Windows Components/Remote Desktop Services/Remote Desktop Session Host/Session Time Limits</em></strong><br />\nSet time limit for disconnected sessions\tEnabled\t<br />\nEnd a disconnected session\t1 minute<br />\n<strong><em>Windows Components/Windows Remote Shell</em></strong><br />\nAllow Remote Shell Access\tEnabled\t<br />\n<br />\nI think that you don't need to set up item 6.<br />\n<br />\n<strong>Upd:</strong><br />\n7) there could also be some problem like a cmd copied via network is blocked by operating system be default (the Unblock button in the Properties dialog of <em>.cmd or </em>.ps1)<br />\n",
    "PostedDate": "2013-10-22T05:51:16.487-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1110585",
    "ThreadId": "462599",
    "Html": "I checked and double checked all steps and it didn't work...\r<br />\n<br />\nI made some research and found that only Enterprise or Ultimate version of Windows 7/8 can make RemoteApp, I've installed Pro versions.\r<br />\nI just test with a 2008 R2 server and an Ultimate Windows 7 and it works!\r<br />\nI can run 2 instances of Firefox on 2 different hosts.\r<br />\n<br />\nI submit the results to the project manager and see if we continue with your framework or go to something else.\r<br />\nI come back as soon as possible.<br />\n",
    "PostedDate": "2013-10-22T08:00:28.467-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1111470",
    "ThreadId": "462599",
    "Html": "Hi, \r<br />\n<br />\nThe projet manager made his decision and decide to not use your framework because it would cost a lot of money in licence for test hosts...\r<br />\nI'm keeping an eye on this module and your framework, it could be usefull for an other project.\r<br />\n<br />\nThank you for all your time and ideas.\r<br />\n<br />\nI edit the subject.<br />\n",
    "PostedDate": "2013-10-24T02:00:54.457-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]