[
  {
    "Id": "982107",
    "ThreadId": "428187",
    "Html": "\r\n<p>I was just looking through the Cmdlets, and I don't see an &quot;Index&quot; Parameter.&nbsp; I believe it would be helpful if I could state the following:<br>\r\n<br>\r\nGet-Process whatever | Get-UIAWindow | Get-UIAPane -Index 2 | ...<br>\r\n<br>\r\nThis way, I could specify exactly which pane I want to grab instead of having to iterate through all of the panes looking for the correct one.&nbsp; This is of course, just a suggestion.&nbsp; I have only been using these cmdlets for a couple of days, and already\r\n I am extremely impressed with the functionality and breadth of this Extension for powershell.&nbsp; I had been toying around with making powershell functions that utilized the UIAutomation class, and this just completely thwarted any idea of &quot;progress&quot;\r\n that I had.&nbsp;</p>\r\n<p>To be clear, I know I can get to the target control with: <br>\r\n<br>\r\nGet-Process whatever | Get-UIAWindow | Get-UIAPane | ...</p>\r\n<p>This just appeared to take a few seconds, and I was thinking with the specification of the index there may be no need to iterate through all of the objects.&nbsp; Thanks for all of your hard work on this extension; it is simple to use, and has an extreme\r\n amount of functionality.</p>\r\n",
    "PostedDate": "2013-01-01T09:26:21.047-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "982157",
    "ThreadId": "428187",
    "Html": "\r\n<p>Hello <a href=\"http://www.codeplex.com/site/users/view/jbartels\">jbartels</a>,</p>\r\n<p>with one your post you have raised several questions at a time. I'll try to separate them from each other and this might help you, I hope.</p>\r\n<p>1) first of all, indexing of the result is what you can easily do by PowerShell itself:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>(Start<span style=\"color:gray\">-</span>Process calc <span style=\"color:gray\">-</span>PassThru | Get<span style=\"color:gray\">-</span>UIAWindow | Get<span style=\"color:gray\">-</span>UIAButton <span style=\"color:gray\">-</span>n <span style=\"color:gray\">[</span><span style=\"color:teal\">1-3</span><span style=\"color:gray\">]</span>)<span style=\"color:gray\">[</span><span style=\"color:teal\">1</span><span style=\"color:gray\">]</span> | Read<span style=\"color:gray\">-</span>UIAControlName\r\n</pre>\r\n</div>\r\n<p>This should return '2' as buttons on the main page of Calculator never change their order (testers who tested Calculator are really happy people :)).</p>\r\n<p>2) now about iterating the UIAutomation tree and, therefore, the performance.</p>\r\n<p>How MS UI Automation works (I don't know exactly how, of course, this is just results of my observation) we can imagine as walk through the graph. An application with GUI is a tree with branches of various length (I'd recommend to try Microsoft's UIA Verify\r\n from codeplex to look at this). If we say &quot;go and return to us all the panes the app has&quot;, MS UI Automation walks through every branch in the UIAutomation tree.</p>\r\n<p>If your application has tens or hundreds of controls, it is a problem, sometimes a big problem. Hundreds of controls are not so rare situation as it seems: a grid, listview or a web page are not the complete list of examples.</p>\r\n<p>We can't (now) do anything to this algorithm, however, sometimes, we can be smarter than this.</p>\r\n<p>2.1) If you have something, just anything what is between window and the pane of your interest, you can direct the tree walker this way (Get-UIAWindow | Get-.... | Get-.... | Get-UIAPane).</p>\r\n<p>2.2) A 'shourt cut' way can be made via the -Win32 parameter (some controls have so-called handles, and, wow, old technologies rules!, search among cotrols with handle is much faster than by MS UI Automation calculations.</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>Get<span style=\"color:gray\">-</span>UIAWindow | Get<span style=\"color:gray\">-</span>UIAButton <span style=\"color:gray\">-</span>n Next <span style=\"color:gray\">-</span>Win32\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>These cmdlets have been used for end-to-end automation of a real application with 3rdparty grid, and the default state of grid on a certain page took up to fifteen minutes to access a grid cell (a control that has no handle). On the opposite, access to links\r\n and buttons works instantly, as they have handles.</p>\r\n<p>2.3) We have another way to regulate the speed: user settings for three ways to search</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><div style=\"color:black; background-color:white\"><pre><span style=\"color:gray\">[</span><span style=\"color:teal\">UIAutomation.Preferences</span><span style=\"color:gray\">]</span><span style=\"color:gray\">::</span>DisableWildCardSearch <span style=\"color:green\"># default: $false</span>\r\n<span style=\"color:gray\">[</span><span style=\"color:teal\">UIAutomation.Preferences</span><span style=\"color:gray\">]</span><span style=\"color:gray\">::</span>DisableWin32Search <span style=\"color:green\"># default: $false</span>\r\n<span style=\"color:gray\">[</span><span style=\"color:teal\">UIAutomation.Preferences</span><span style=\"color:gray\">]</span><span style=\"color:gray\">::</span>DisableExactSearch <span style=\"color:green\"># default: $true</span>\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>\r\n<p>The first way is a search via collecting all controls of the type(s) selected by user and searching by control's properties in the collection - this is the default search. Not surprisingly, it can be slow when we have a number of controls.</p>\r\n<p>The second way is a search via handles (it's useless in situations when we exactly know that we need handless contol(s)).</p>\r\n<p>The third way is the original way to search - just how MS UI Automation searches (no wildcards). You may switch off two first way and turn on the third to check what is better.</p>\r\n<p>2.4) The first way of search has an additional capability for complicated cases: it consumes hashtables.</p>\r\n<p>Shortly, hashtables of properties look like:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>Start<span style=\"color:gray\">-</span>Process calc <span style=\"color:gray\">-</span>PassThru | Get<span style=\"color:gray\">-</span>UIAWindow | Get<span style=\"color:gray\">-</span>UIAButton <span style=\"color:gray\">-</span>n <span style=\"color:gray\">[</span><span style=\"color:teal\">1-3</span><span style=\"color:gray\">]</span> | ConvertTo<span style=\"color:gray\">-</span>UIASearchCriteria\r\n<span style=\"color:green\"># @{Name=&quot;1&quot;;AutomationId=&quot;131&quot;;ControlType=&quot;Button&quot;;}</span>\r\n<span style=\"color:green\"># @{Name=&quot;2&quot;;AutomationId=&quot;132&quot;;ControlType=&quot;Button&quot;;}</span>\r\n<span style=\"color:green\"># @{Name=&quot;3&quot;;AutomationId=&quot;133&quot;;ControlType=&quot;Button&quot;;}</span>\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>To get the full set of properties (including pid and handles that are never useful on the second run of the app):</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>Start<span style=\"color:gray\">-</span>Process calc <span style=\"color:gray\">-</span>PassThru | Get<span style=\"color:gray\">-</span>UIAWindow | Get<span style=\"color:gray\">-</span>UIAButton <span style=\"color:gray\">-</span>n <span style=\"color:gray\">[</span><span style=\"color:teal\">1-3</span><span style=\"color:gray\">]</span> | ConvertTo<span style=\"color:gray\">-</span>UIASearchCriteria\r\n<span style=\"color:gray\">-</span>Full\r\n</pre>\r\n</div>\r\nYou are able to combine these properties in any order, not forgetting to separate them with semicolon and to include the value (of any type) into quotes.\r\n<p></p>\r\n<p>&nbsp;Start<span style=\"color:gray\">-</span>Process calc <span style=\"color:gray\">-</span>PassThru | Get<span style=\"color:gray\">-</span>UIAWindow | Get<span style=\"color:gray\">-</span>UIAControl\r\n<span style=\"color:gray\">-</span>SearchCriteria @{accesskey<span style=\"color:gray\">=</span><span style=\"color:#a31515\">&quot;Alt+V&quot;</span>} |&nbsp;Read<span style=\"color:gray\">-</span>UIAControlType</p>\r\n<p>This code returns a menu item (Calculator lacks controls with access keys and accelerator keys).</p>\r\n<p>3) Sometimes it's unavoidable to click to a control by coordinates. For example, if a control of your interest never changes the position, you could try something like:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>Get<span style=\"color:gray\">-</span>UIAWindow | Move<span style=\"color:gray\">-</span>UIACursor <span style=\"color:gray\">-</span>X 100 <span style=\"color:gray\">-</span>Y 200 | Get<span style=\"color:gray\">-</span>UIAControlFromPoint\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>or</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>Get<span style=\"color:gray\">-</span>UIAWindow | Invoke<span style=\"color:gray\">-</span>UIAControlClick <span style=\"color:gray\">-</span>X 50 <span style=\"color:gray\">-</span>Y 60 | Get<span style=\"color:gray\">-</span>UIAControlFromPoint\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>The Invoke-UIAControlClick cmdlet accepts a control and clicks if the control has handle. If not, it get its parent, even the parent of parent and so on, unless a control with handle is gotten. After that it calculates the position relatively to a control\r\n with handle and clicks pretty well to what we need to.</p>\r\n<p>4) If you are using some tool that returns handles of controls, you can use the cmdlet Get-UIAControlFromHandle</p>\r\n",
    "PostedDate": "2013-01-01T13:39:50.937-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "990018",
    "ThreadId": "428187",
    "Html": "\r\n<p>I forgot to mention one more option: you may use <a title=\"'sibling' cmdlets\" href=\"http://uiautomation.codeplex.com/wikipage?title=Getting%20siblings&referringTitle=Navigation%20among%20controls\" target=\"_blank\">\r\n'siblings' cmdlets</a>: Get-UIAControlNextSibling and Get-UIAControlPreviousSibling.</p>\r\n",
    "PostedDate": "2013-01-21T14:51:52.277-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]