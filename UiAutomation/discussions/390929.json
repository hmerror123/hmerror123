[
  {
    "Id": "897750",
    "ThreadId": "390929",
    "Html": "\r\n<p>Do you have an example to illustrate how you can find controls? I was looking for a way to search for all controls in a recursive way, starting with Get-UIAWindow. However, all cmdlets only return one element, and the properties of the returned element don't\r\n help much in identifying it.</p>\r\n<p>Ultimately, I would like to read and write text to a text control. However, I don't even know the type and name of the control (which is why I would like to use cmdlets to investigate what's present).</p>\r\n<p>Any chance? Your project BTW rocks!</p>\r\n<p>-Tob</p>\r\n",
    "PostedDate": "2012-08-09T12:40:17.507-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "897801",
    "ThreadId": "390929",
    "Html": "<p>Hello TobW,</p>\r\n<p>there are several cmdlets that do exactly what MS UI Automation FindAll and TreeWalker do.</p>\r\n<p>Below the names, please find out samples in the blog (I'm on an iPad now and can't test any samples):</p>\r\n<p>Get-UIAControlChildren - FindAll, TreeScope.Children</p>\r\n<p>Get-UIAControlDescendants - FindAll, TreeScope.Descendants</p>\r\n<p>Get-UIAControlParent/Ancestors/NextSibling/firstChild/... - TreeWalker</p>\r\n<p>Search-UIAControl - TreeWalker (in the samples package, the Search- cmdlet is used here and there)</p>\r\n<p>These cmdlets may help you in automatic gathering of controls. If you are interested in manual investigation, I'd recommend using UIAutomationSpy that suggests code for a control you are hovering over.<br />What's more, the UIAutomation framework was created with unification in mind (the good object model of MS UI Automation marvellously helped in that) and this means that you have the Get-UIAControl cmdlet. Now, I open the terrible secret of the framework: tons of cmdlets are simply hard-coded aliases. :)&nbsp;</p>\r\n<p>Get-UIAButton == Get-UIAControl -ControlType Button</p>\r\n<p>Get-UIAEdit == Get-UIAControl -ControlType Edit</p>\r\n<p>In other words, the framework can be used similarly to the WASP framework:</p>\r\n<p>Start-Process calc -PassThru | Get-UIAWindow | Get-UIAControl -Name 1 | Invoke-UIAInvokePattern;As can be seen, the 'pattern' cmdlets are aliases:Invoke-UIAButtonClick == Invoke-UIAInvokePatternjust run the following:Get-Command -module uia* *pattern*and you'll obtain the list of supported 'typeless' pattern cmdlets.<br />Regarding reading and writing text into a control, there are two ways:</p>\r\n<p>0) (the traditional way) Get-UIATextBoxText, Set-UIATextBoxText</p>\r\n<p>1) 'bare' patterns</p>\r\n<p>Get-UIAValuePatternGet</p>\r\n<p>Set-UIAValuePatternSet</p>\r\n<p>There are also cmdlets for TextPattern, but, as I remember, they have never been asked by people and left written in half (I even found a second ago a typo: Get-UIAPatternSet)</p>\r\n<p>2) the universal Win32 cmdlet Set-UIAControlText. It works only with control that have a handle.</p>\r\n<p>There even is a SendKeys cmdlet, Invoke-UIAControlKeys, for testers who found no better ways to put text in a control...</p>\r\n<p><br />Finally, you are welcome to suggest cmdlets if three hundred now-existing don't cover your needs (for example, not all possible patterns are supported for now).</p>",
    "PostedDate": "2012-08-09T14:53:00.617-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "900490",
    "ThreadId": "390929",
    "Html": "<p>Even though the best way to investigate into control placement in the UI Automaitn tree is by using UIAutomaitonSpy or the Start-UIARecorder (Start-UIATranscript) cmdlet, there are ways to select necessary controls on the fly.</p>\r\n<p>The following example demonstrates this.</p>\r\n<p><strong>Task</strong>: we have a Sharepoint 2007 portal of a project. There is used SCRUM, so that sprints are posted on the portal. Each sprint has its own Sharepoint page and contains a list of stories with proposed man-hours for each.</p>\r\n<p>Every story is a Sharepoint page, and the number at the end of its URL is the unique story Id.</p>\r\n<p>Provide a list of stories for a selected sprint in the format: story_id [tab] story_name</p>\r\n<p><strong>The script</strong>:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: gray;\">[</span><span style=\"color: teal;\">UIAutomation.Preferences</span><span style=\"color: gray;\">]</span><span style=\"color: gray;\">::</span>Timeout <span style=\"color: gray;\">=</span> 20000;\r\nGet<span style=\"color: gray;\">-</span>UIAWindow <span style=\"color: gray;\">-</span>n Sprints<span style=\"color: gray;\">*</span> | Get<span style=\"color: gray;\">-</span>UIAPane <span style=\"color: gray;\">-</span>n Sprints<span style=\"color: gray;\">*</span> | Get<span style=\"color: gray;\">-</span>UIAPane <span style=\"color: gray;\">-</span>n Sprints<span style=\"color: gray;\">*</span> | Get<span style=\"color: gray;\">-</span>UIAControlDescendants <span style=\"color: gray;\">-</span>ControlType Hyperlink | ?{(<span style=\"color: orangered;\">$_</span> | Get<span style=\"color: gray;\">-</span>UIAHyperlinkText) <span style=\"color: gray;\">-match</span> <span style=\"color: #a31515;\">\"(?&lt;=Stories[/]DispForm.aspx[?]ID[=])[\\d]+(?=[^\\d]?)\"</span>;} | <span style=\"color: gray;\">%</span>{ <span style=\"color: #a31515;\">\"$(($_ | Get-UIAHyperlinkText).Substring(($_ | Get-UIAHyperlinkText).IndexOf(\"</span><span style=\"color: gray;\">=</span><span style=\"color: #a31515;\">\") + 1))`t$($_.Current.Name)\"</span>;}\r\n</pre>\r\n</div>\r\n</p>\r\n<p>Now, I'll explain the code in detail:</p>\r\n<p>1) we get a window (IE10 page in my case) by its title Sprints.....</p>\r\n<p>2) we get a pane</p>\r\n<p>3) we get one more pane. Why? Controls in the UIAutomation tree are placed like branches on a wooden tree, and nobody can predict the order UIAutomaiton will use to go through all the branches before outputting the result.</p>\r\n<p>I investigated into controls with the help of UIAutomaitonSpy not to force the script to search every time. It's like a short cut path in the UI Automation tree. I force the UI Automaiton engine to go this way by ordering what to search.</p>\r\n<p>The second pane is the pane that contains a lot of links.</p>\r\n<p>4) Investigation on the fly. We get all the links from the pane. There are a lot of them. Besides stories' links, there are</p>\r\n<p>- the link to the project</p>\r\n<p>- links to each Sharepoint page that are higher then the current page in the hierarchy of Sharepoint pages</p>\r\n<p>- the link to the page author's page</p>\r\n<p>and so on</p>\r\n<p>5) We check all the links' texts (i.e., URLs) whether they match the regular expression (all stories' links contain the word Stories and a couple of distinguishing things).</p>\r\n<p>6) If we've gotten the match(es), we further concatenate $link.Current.Name (i.e., visible text) and the numeric part of link's URL to produce the result.</p>\r\n<p>As can be seen, this example is a combination of pre-investigation made by hands (and investigation tools, I'd recommend UIAutomaitonSpy and, if you need &nbsp;richer code generation, the Start-UIARecorder cmdlet) and on-the-fly calculations.\r\n<hr />\r\n</p>",
    "PostedDate": "2012-08-17T02:17:06.587-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "905208",
    "ThreadId": "390929",
    "Html": "<blockquote style=\"border: solid .1em #ccc; font-style: italic; margin: .25em 1em 0 1em; padding: 0 .25em 0 .25em;\"><strong>TobW wrote:</strong><br />\r\n<p>I was looking for a way to search for all controls in a recursive way, starting with Get-UIAWindow. However, all cmdlets only return one element, and the properties of the returned element don't  help much in identifying it.</p>\r\n</blockquote>\r\n<p>HI Tob,&nbsp;</p>\r\n<p>the idea about converting cmdlets' output to a collection has been taking me all the time after you've asked for and finally I did that. Now, cmdlets return all objects that match, even through Win32 API. <a title=\"There\" href=\"http://softwaretestingusingpowershell.com/2012/08/28/0-8-0-preview-4-no-more-restrictions-on-pipeline/\">There</a> is a bit about the topic.</p>",
    "PostedDate": "2012-08-28T09:47:04.653-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]