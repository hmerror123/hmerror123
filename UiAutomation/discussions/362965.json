[
  {
    "Id": "860796",
    "ThreadId": "362965",
    "Html": "\r\n<div>\r\n<p>I'm trying to de test automation on a metro app in Release Preview with 8.0P1.</p>\r\n<p>I'm not getting it to work. Specifically</p>\r\n<p>When I run the&nbsp;StartAppsWindows8RP.ps1, provided in the samples zip,from the PowerShell ISE The Metro start screen opens, but nothing happens.In the output the errors below appear</p>\r\n<p>Note that I needed to add the ipmo lines to the script.</p>\r\n<p>Any ideas?</p>\r\n<p><span>&nbsp;</span>Cached&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;Current&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;CachedParent&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;CachedChildren&nbsp;&nbsp;\r\n &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>------&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;-------&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;------------&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;--------------&nbsp;&nbsp;\r\n &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>System.Windows.Automat... System.Windows.Automat...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>Get-UIAListItem : Get-UIAListItem: timeout expired for class: ' &#43; , control type: ListItem, title:&nbsp;</p>\r\n<p>*Internet*Explorer*</p>\r\n<p>At C:\\Users\\pten_000\\Desktop\\UIAutomation-1\\Metro\\StartAppsWindows8RP.ps1:5 char:1</p>\r\n<p>&#43; Get-UIAListItem -Name *Internet*Explorer* | Invoke-UIAListItemClick;</p>\r\n<p>&#43; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</p>\r\n<p>&nbsp; &nbsp;&nbsp;&#43; CategoryInfo&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;: OperationTimeout: (:) [Get-UIAListItem], Exception</p>\r\n<p>&nbsp; &nbsp;&nbsp;&#43; FullyQualifiedErrorId : ControlIsNull,UIAutomation.Commands.GetUIAListItemCommand</p>\r\n<p>Get-UIAListItem : Get-UIAListItem: timeout expired for class: ' &#43; , control type: ListItem, title:&nbsp;</p>\r\n<p>*people*</p>\r\n<p>At C:\\Users\\pten_000\\Desktop\\UIAutomation-1\\Metro\\StartAppsWindows8RP.ps1:8 char:1</p>\r\n<p>&#43; Get-UIAListItem -Name *people* | Invoke-UIAListItemClick;</p>\r\n<p>&#43; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</p>\r\n<p>&nbsp; &nbsp;&nbsp;&#43; CategoryInfo&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;: OperationTimeout: (:) [Get-UIAListItem], Exception</p>\r\n<p>&nbsp; &nbsp;&nbsp;&#43; FullyQualifiedErrorId : ControlIsNull,UIAutomation.Commands.GetUIAListItemCommand</p>\r\n<p>Get-UIAListItem : Get-UIAListItem: timeout expired for class: ' &#43; , control type: ListItem, title:&nbsp;</p>\r\n<p>*messag*</p>\r\n<p>At C:\\Users\\pten_000\\Desktop\\UIAutomation-1\\Metro\\StartAppsWindows8RP.ps1:11 char:1</p>\r\n<p>&#43; Get-UIAListItem -Name *messag* | Invoke-UIAListItemClick;</p>\r\n<p>&#43; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</p>\r\n<p>&nbsp; &nbsp;&nbsp;&#43; CategoryInfo&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;: OperationTimeout: (:) [Get-UIAListItem], Exception</p>\r\n<p>&nbsp; &nbsp;&nbsp;&#43; FullyQualifiedErrorId : ControlIsNull,UIAutomation.Commands.GetUIAListItemCommand</p>\r\n<p>Get-UIAListItem : Get-UIAListItem: timeout expired for class: ' &#43; , control type: ListItem, title:&nbsp;</p>\r\n<p>*phot*</p>\r\n<p>At C:\\Users\\pten_000\\Desktop\\UIAutomation-1\\Metro\\StartAppsWindows8RP.ps1:14 char:1</p>\r\n<p>&#43; Get-UIAListItem -Name *phot* | Invoke-UIAListItemClick;</p>\r\n<p>&#43; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~</p>\r\n<p>&nbsp; &nbsp;&nbsp;&#43; CategoryInfo&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;: OperationTimeout: (:) [Get-UIAListItem], Exception</p>\r\n<p>&nbsp; &nbsp;&nbsp;&#43; FullyQualifiedErrorId : ControlIsNull,UIAutomation.Commands.GetUIAListItemCommand</p>\r\n<p>Get-UIAListItem : Get-UIAListItem: timeout expired for class: ' &#43; , control type: ListItem, title:&nbsp;</p>\r\n<p>*calen*</p>\r\n<p>At C:\\Users\\pten_000\\Desktop\\UIAutomation-1\\Metro\\StartAppsWindows8RP.ps1:17 char:1</p>\r\n<p>&#43; Get-UIAListItem -Name *calen* | Invoke-UIAListItemClick;</p>\r\n<p>&#43; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</p>\r\n<p>&nbsp; &nbsp;&nbsp;&#43; CategoryInfo&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;: OperationTimeout: (:) [Get-UIAListItem], Exception</p>\r\n<p>&nbsp; &nbsp;&nbsp;&#43; FullyQualifiedErrorId : ControlIsNull,UIAutomation.Commands.GetUIAListItemCommand</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n</div>\r\n",
    "PostedDate": "2012-07-12T04:28:56.573-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "861093",
    "ThreadId": "362965",
    "Html": "<p>Hello <a class=\"UserProfileLink\" href=\"http://www.codeplex.com/site/users/view/petertennekes\">petertennekes</a>,</p>\r\n<p>first of all, it won't work in MIcrosoft powershell tools (both in powershellexe and in powershell_ISE) until they do something with the binaries. :)</p>\r\n<p>However, they won't and there are many reasons: to test Metro UI applications, your app should be uiAccess-enabled what means 'having too high privileges'.</p>\r\n<p>Microsoft's guys never, I believe, put these privileges into general-available applications.</p>\r\n<p>&nbsp;</p>\r\n<p>For the purpose of Metro UI apps testing, the '*.for.Metro.testing.zip' package includes two utilities: UIAutomationSpy and UIARunner.</p>\r\n<p>Both utilities are uiAccess-enabled provided that you imported the certificate, put them under a security location (%ProgramFiles%, for example) or tailored the appropriate policy. After you agree with UAC dialog, they'll can work with examples related to Metro UI. UIAutomationSpy is for investigating into controls and running small pieces of code. UIARunner is a typical test runner with basic report capabilities. Soon, I'll put out the Preview 2 with improvements and bug fix.</p>\r\n<p>&nbsp;</p>\r\n<p>In my blog, I prepared a page&nbsp;<a href=\"http://softwaretestingusingpowershell.com/metro-ui-automation/\">http://softwaretestingusingpowershell.com/metro-ui-automation/</a>&nbsp;that contains/will contain step-by-step how tos, how to install and prepare and how to use the tools).</p>\r\n<p>Please notice, if you saved the utilities under C:\\Users and didn't disable the policy 'User Account Control: Only elevate UIAccess applications that are installed in secure locations' to allow uiAccess applications be running from outside security locations, you will fail also with our tools. That's Microsoft's security. The modules (UIAutomation.dll and TMX.dll) can be saved elsewhere.</p>\r\n<p>&nbsp;</p>\r\n<p>Let's leave Microsoft tools only for code editing and working with traditional applications. ;)&nbsp;</p>\r\n<p>If instructions on the page&nbsp;<a href=\"http://softwaretestingusingpowershell.com/metro-ui-automation/\">http://softwaretestingusingpowershell.com/metro-ui-automation/</a>&nbsp;poor or too oblique, please don't hesitate to complain here: I'll improve them immediately.</p>",
    "PostedDate": "2012-07-12T06:35:12.257-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "863810",
    "ThreadId": "362965",
    "Html": "<p>Briefly, below are things that should be implemented in aplications in order to test Metro UI apps:</p>\r\n<p>\"Assistive technology applications typically need access to the protected system UI elements, or to other processes that might be running at a higher privilege level. Therefore, assistive technology applications must be trusted by the system, and must run with special privileges.</p>\r\n<p>To get access to higher IL processes, <span style=\"color: #ff0000;\">an assistive technology application must set the UIAccess flag in the application's manifest</span>.</p>\r\n<p>In addition to having access to higher IL processes, <span style=\"color: #ff0000;\">an assistive technology application with UIAccess can run as the topmost application in the z-order at any time</span>, meaning that an assistive technology application can be visible and available whenever the user needs it.\"</p>\r\n<p><a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ee671610(v=vs.85).aspx\">http://msdn.microsoft.com/en-us/library/windows/desktop/ee671610(v=vs.85).aspx</a></p>\r\n<p>At least, there is no reason to make powershell.exe and ISE topmost, over all the remaining windows in the system.</p>\r\n<p>&nbsp;</p>\r\n<p>I understood that you wanted to get more output from scripts, and I added OUTPUT records to the UIARunner UI and the same output to the&nbsp;UIARunner_report.csv report file.</p>\r\n<p>&nbsp;</p>\r\n<p>There are three ways to run our Metro UI testing scripts;</p>\r\n<p>1) by opening a script in UIARunner and clicking on the Run button/menu item</p>\r\n<p>2) by running a script from command line: UIARunner.exe [path]\\script.ps1</p>\r\n<p>3) by pasting the script code or calling a script from the Script tab in UIAutomationSpy</p>\r\n<p>There is also the fourth way: to put your script into the UIAutomationSpy folder and rename it to UIAutomationSpy.ps1, but this way is quite useless, comparatively to three aforementioned.</p>\r\n<p>&nbsp;</p>\r\n<p>Regardning the need to add the ipmo lines, these lines are not necessary, because both UIARunner and UIAutomationSpy load these binaries automatically if they are represented in the application's folder.</p>",
    "PostedDate": "2012-07-13T01:45:42.683-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "870147",
    "ThreadId": "362965",
    "Html": "<p>Hello <a class=\"UserProfileLink\" href=\"http://www.codeplex.com/site/users/view/petertennekes\">petertennekes</a>&nbsp;,</p>\r\n<p>I made an experimental build of BGShell (bgshell.codeplex.com) that is working similarly to powershell.exe and ISE (with Intellisence and context menu).</p>\r\n<p><a title=\"http://uiautomation.codeplex.com/downloads/get/453931\" href=\"http://uiautomation.codeplex.com/downloads/get/453931\">http://uiautomation.codeplex.com/downloads/get/453931</a></p>\r\n<p>Unfortunately, I managed to build only version for .NET 3.5, so that you will need to set up/download .NET 2.0/3.5 on/to your test Windows 8 (Windows 8 will offer you to download .NET 2.0/3.5).</p>",
    "PostedDate": "2012-07-16T13:32:13.287-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]